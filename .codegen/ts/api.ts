/**
 * Snippets API
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import localVarRequest = require('request');
import http = require('http');
import Promise = require('bluebird');

let defaultBasePath = 'http://127.0.0.1:8000';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

/* tslint:disable:no-unused-variable */
let primitives = [
                    "string",
                    "boolean",
                    "double",
                    "integer",
                    "long",
                    "float",
                    "number",
                    "any"
                 ];

class ObjectSerializer {

    public static findCorrectType(data: any, expectedType: string) {
        if (data == undefined) {
            return expectedType;
        } else if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        } else if (expectedType === "Date") {
            return expectedType;
        } else {
            if (enumsMap[expectedType]) {
                return expectedType;
            }

            if (!typeMap[expectedType]) {
                return expectedType; // w/e we don't know the type
            }

            // Check the discriminator
            let discriminatorProperty = typeMap[expectedType].discriminator;
            if (discriminatorProperty == null) {
                return expectedType; // the type does not have a discriminator. use it.
            } else {
                if (data[discriminatorProperty]) {
                    return data[discriminatorProperty]; // use the type given in the discriminator
                } else {
                    return expectedType; // discriminator was not present (or an empty string)
                }
            }
        }
    }

    public static serialize(data: any, type: string) {
        if (data == undefined) {
            return data;
        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        } else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType: string = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData: any[] = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.serialize(date, subType));
            }
            return transformedData;
        } else if (type === "Date") {
            return data.toString();
        } else {
            if (enumsMap[type]) {
                return data;
            }
            if (!typeMap[type]) { // in case we dont know the type
                return data;
            }

            // get the map for the correct type.
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            let instance: {[index: string]: any} = {};
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
            }
            return instance;
        }
    }

    public static deserialize(data: any, type: string) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);
        if (data == undefined) {
            return data;
        } else if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        } else if (type.lastIndexOf("Array<", 0) === 0) { // string.startsWith pre es6
            let subType: string = type.replace("Array<", ""); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData: any[] = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.deserialize(date, subType));
            }
            return transformedData;
        } else if (type === "Date") {
            return new Date(data);
        } else {
            if (enumsMap[type]) {// is Enum
                return data;
            }

            if (!typeMap[type]) { // dont know the type
                return data;
            }
            let instance = new typeMap[type]();
            let attributeTypes = typeMap[type].getAttributeTypeMap();
            for (let index in attributeTypes) {
                let attributeType = attributeTypes[index];
                instance[attributeType.name] = ObjectSerializer.deserialize(data[attributeType.baseName], attributeType.type);
            }
            return instance;
        }
    }
}

export class Course {
    'id'?: number;
    'name': string;
    'description'?: string;
    'creator'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "creator",
            "baseName": "creator",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return Course.attributeTypeMap;
    }
}

export class Event {
    'id'?: number;
    'name': string;
    'instructions'?: string;
    'beginTimestamp'?: Date;
    'endTimestamp'?: Date;
    'eventType': number;
    'progressionRule'?: number;
    'state'?: number;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "instructions",
            "baseName": "instructions",
            "type": "string"
        },
        {
            "name": "beginTimestamp",
            "baseName": "begin_timestamp",
            "type": "Date"
        },
        {
            "name": "endTimestamp",
            "baseName": "end_timestamp",
            "type": "Date"
        },
        {
            "name": "eventType",
            "baseName": "event_type",
            "type": "number"
        },
        {
            "name": "progressionRule",
            "baseName": "progression_rule",
            "type": "number"
        },
        {
            "name": "state",
            "baseName": "state",
            "type": "number"
        }    ];

    static getAttributeTypeMap() {
        return Event.attributeTypeMap;
    }
}

export class EventTemplate {
    'name'?: string;
    'rules': Array<EventTemplateRule>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "rules",
            "baseName": "rules",
            "type": "Array<EventTemplateRule>"
        }    ];

    static getAttributeTypeMap() {
        return EventTemplate.attributeTypeMap;
    }
}

export class EventTemplateRule {
    'ruleType': number;
    'targetSlotNumber': number;
    'exercises'?: Array<number>;
    'clauses': Array<EventTemplateRuleClause>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "ruleType",
            "baseName": "rule_type",
            "type": "number"
        },
        {
            "name": "targetSlotNumber",
            "baseName": "target_slot_number",
            "type": "number"
        },
        {
            "name": "exercises",
            "baseName": "exercises",
            "type": "Array<number>"
        },
        {
            "name": "clauses",
            "baseName": "clauses",
            "type": "Array<EventTemplateRuleClause>"
        }    ];

    static getAttributeTypeMap() {
        return EventTemplateRule.attributeTypeMap;
    }
}

export class EventTemplateRuleClause {
    'tags': Array<number>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "tags",
            "baseName": "tags",
            "type": "Array<number>"
        }    ];

    static getAttributeTypeMap() {
        return EventTemplateRuleClause.attributeTypeMap;
    }
}

export class Exercise {
    'id'?: number;
    'text'?: string;
    'exerciseType': number;
    'solution'?: string;
    'state'?: number;
    'subExercises'?: string;
    'choices'?: Array<ExerciseChoice>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "text",
            "baseName": "text",
            "type": "string"
        },
        {
            "name": "exerciseType",
            "baseName": "exercise_type",
            "type": "number"
        },
        {
            "name": "solution",
            "baseName": "solution",
            "type": "string"
        },
        {
            "name": "state",
            "baseName": "state",
            "type": "number"
        },
        {
            "name": "subExercises",
            "baseName": "sub_exercises",
            "type": "string"
        },
        {
            "name": "choices",
            "baseName": "choices",
            "type": "Array<ExerciseChoice>"
        }    ];

    static getAttributeTypeMap() {
        return Exercise.attributeTypeMap;
    }
}

export class ExerciseChoice {
    'id'?: number;
    'text': string;
    'score'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "number"
        },
        {
            "name": "text",
            "baseName": "text",
            "type": "string"
        },
        {
            "name": "score",
            "baseName": "score",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return ExerciseChoice.attributeTypeMap;
    }
}


let enumsMap: {[index: string]: any} = {
}

let typeMap: {[index: string]: any} = {
    "Course": Course,
    "Event": Event,
    "EventTemplate": EventTemplate,
    "EventTemplateRule": EventTemplateRule,
    "EventTemplateRuleClause": EventTemplateRuleClause,
    "Exercise": Exercise,
    "ExerciseChoice": ExerciseChoice,
}

export interface Authentication {
    /**
    * Apply authentication settings to header and query params.
    */
    applyToRequest(requestOptions: localVarRequest.Options): void;
}

export class HttpBasicAuth implements Authentication {
    public username: string = '';
    public password: string = '';

    applyToRequest(requestOptions: localVarRequest.Options): void {
        requestOptions.auth = {
            username: this.username, password: this.password
        }
    }
}

export class ApiKeyAuth implements Authentication {
    public apiKey: string = '';

    constructor(private location: string, private paramName: string) {
    }

    applyToRequest(requestOptions: localVarRequest.Options): void {
        if (this.location == "query") {
            (<any>requestOptions.qs)[this.paramName] = this.apiKey;
        } else if (this.location == "header" && requestOptions && requestOptions.headers) {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
    }
}

export class OAuth implements Authentication {
    public accessToken: string = '';

    applyToRequest(requestOptions: localVarRequest.Options): void {
        if (requestOptions && requestOptions.headers) {
            requestOptions.headers["Authorization"] = "Bearer " + this.accessToken;
        }
    }
}

export class VoidAuth implements Authentication {
    public username: string = '';
    public password: string = '';

    applyToRequest(_: localVarRequest.Options): void {
        // Do nothing
    }
}

export enum CoursesApiApiKeys {
}

export class CoursesApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'Basic': new HttpBasicAuth(),
    }

    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            this.username = basePathOrUsername;
            this.password = password
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
	this.authentications.default = auth;
    }

    public setApiKey(key: CoursesApiApiKeys, value: string) {
        (this.authentications as any)[CoursesApiApiKeys[key]].apiKey = value;
    }
    set username(username: string) {
        this.authentications.Basic.username = username;
    }

    set password(password: string) {
        this.authentications.Basic.password = password;
    }
    /**
     * 
     * @param data 
     * @param {*} [options] Override http request options.
     */
    public coursesCreate (data: Course, options: any = {}) : Promise<{ response: http.ClientResponse; body: Course;  }> {
        const localVarPath = this.basePath + '/courses/';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'data' is not null or undefined
        if (data === null || data === undefined) {
            throw new Error('Required parameter data was null or undefined when calling coursesCreate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(data, "Course")
        };

        this.authentications.Basic.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Course;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Course");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param id A unique integer value identifying this course.
     * @param {*} [options] Override http request options.
     */
    public coursesDelete (id: number, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/courses/{id}/'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling coursesDelete.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.Basic.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param coursePk 
     * @param data 
     * @param {*} [options] Override http request options.
     */
    public coursesEventsCreate (coursePk: string, data: Event, options: any = {}) : Promise<{ response: http.ClientResponse; body: Event;  }> {
        const localVarPath = this.basePath + '/courses/{course_pk}/events/'
            .replace('{' + 'course_pk' + '}', encodeURIComponent(String(coursePk)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'coursePk' is not null or undefined
        if (coursePk === null || coursePk === undefined) {
            throw new Error('Required parameter coursePk was null or undefined when calling coursesEventsCreate.');
        }

        // verify required parameter 'data' is not null or undefined
        if (data === null || data === undefined) {
            throw new Error('Required parameter data was null or undefined when calling coursesEventsCreate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(data, "Event")
        };

        this.authentications.Basic.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Event;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Event");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param coursePk 
     * @param id A unique integer value identifying this event.
     * @param {*} [options] Override http request options.
     */
    public coursesEventsDelete (coursePk: string, id: number, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/courses/{course_pk}/events/{id}/'
            .replace('{' + 'course_pk' + '}', encodeURIComponent(String(coursePk)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'coursePk' is not null or undefined
        if (coursePk === null || coursePk === undefined) {
            throw new Error('Required parameter coursePk was null or undefined when calling coursesEventsDelete.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling coursesEventsDelete.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.Basic.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param coursePk 
     * @param {*} [options] Override http request options.
     */
    public coursesEventsList (coursePk: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: Array<Event>;  }> {
        const localVarPath = this.basePath + '/courses/{course_pk}/events/'
            .replace('{' + 'course_pk' + '}', encodeURIComponent(String(coursePk)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'coursePk' is not null or undefined
        if (coursePk === null || coursePk === undefined) {
            throw new Error('Required parameter coursePk was null or undefined when calling coursesEventsList.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.Basic.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Event>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Event>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param coursePk 
     * @param id A unique integer value identifying this event.
     * @param data 
     * @param {*} [options] Override http request options.
     */
    public coursesEventsPartialUpdate (coursePk: string, id: number, data: Event, options: any = {}) : Promise<{ response: http.ClientResponse; body: Event;  }> {
        const localVarPath = this.basePath + '/courses/{course_pk}/events/{id}/'
            .replace('{' + 'course_pk' + '}', encodeURIComponent(String(coursePk)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'coursePk' is not null or undefined
        if (coursePk === null || coursePk === undefined) {
            throw new Error('Required parameter coursePk was null or undefined when calling coursesEventsPartialUpdate.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling coursesEventsPartialUpdate.');
        }

        // verify required parameter 'data' is not null or undefined
        if (data === null || data === undefined) {
            throw new Error('Required parameter data was null or undefined when calling coursesEventsPartialUpdate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PATCH',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(data, "Event")
        };

        this.authentications.Basic.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Event;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Event");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param coursePk 
     * @param eventPk 
     * @param {*} [options] Override http request options.
     */
    public coursesEventsParticipationsCreate (coursePk: string, eventPk: string, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/courses/{course_pk}/events/{event_pk}/participations/'
            .replace('{' + 'course_pk' + '}', encodeURIComponent(String(coursePk)))
            .replace('{' + 'event_pk' + '}', encodeURIComponent(String(eventPk)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'coursePk' is not null or undefined
        if (coursePk === null || coursePk === undefined) {
            throw new Error('Required parameter coursePk was null or undefined when calling coursesEventsParticipationsCreate.');
        }

        // verify required parameter 'eventPk' is not null or undefined
        if (eventPk === null || eventPk === undefined) {
            throw new Error('Required parameter eventPk was null or undefined when calling coursesEventsParticipationsCreate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.Basic.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param coursePk 
     * @param eventPk 
     * @param {*} [options] Override http request options.
     */
    public coursesEventsParticipationsList (coursePk: string, eventPk: string, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/courses/{course_pk}/events/{event_pk}/participations/'
            .replace('{' + 'course_pk' + '}', encodeURIComponent(String(coursePk)))
            .replace('{' + 'event_pk' + '}', encodeURIComponent(String(eventPk)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'coursePk' is not null or undefined
        if (coursePk === null || coursePk === undefined) {
            throw new Error('Required parameter coursePk was null or undefined when calling coursesEventsParticipationsList.');
        }

        // verify required parameter 'eventPk' is not null or undefined
        if (eventPk === null || eventPk === undefined) {
            throw new Error('Required parameter eventPk was null or undefined when calling coursesEventsParticipationsList.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.Basic.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param coursePk 
     * @param eventPk 
     * @param id A unique integer value identifying this event participation.
     * @param {*} [options] Override http request options.
     */
    public coursesEventsParticipationsPartialUpdate (coursePk: string, eventPk: string, id: number, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/courses/{course_pk}/events/{event_pk}/participations/{id}/'
            .replace('{' + 'course_pk' + '}', encodeURIComponent(String(coursePk)))
            .replace('{' + 'event_pk' + '}', encodeURIComponent(String(eventPk)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'coursePk' is not null or undefined
        if (coursePk === null || coursePk === undefined) {
            throw new Error('Required parameter coursePk was null or undefined when calling coursesEventsParticipationsPartialUpdate.');
        }

        // verify required parameter 'eventPk' is not null or undefined
        if (eventPk === null || eventPk === undefined) {
            throw new Error('Required parameter eventPk was null or undefined when calling coursesEventsParticipationsPartialUpdate.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling coursesEventsParticipationsPartialUpdate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PATCH',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.Basic.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param coursePk 
     * @param eventPk 
     * @param id A unique integer value identifying this event participation.
     * @param {*} [options] Override http request options.
     */
    public coursesEventsParticipationsRead (coursePk: string, eventPk: string, id: number, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/courses/{course_pk}/events/{event_pk}/participations/{id}/'
            .replace('{' + 'course_pk' + '}', encodeURIComponent(String(coursePk)))
            .replace('{' + 'event_pk' + '}', encodeURIComponent(String(eventPk)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'coursePk' is not null or undefined
        if (coursePk === null || coursePk === undefined) {
            throw new Error('Required parameter coursePk was null or undefined when calling coursesEventsParticipationsRead.');
        }

        // verify required parameter 'eventPk' is not null or undefined
        if (eventPk === null || eventPk === undefined) {
            throw new Error('Required parameter eventPk was null or undefined when calling coursesEventsParticipationsRead.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling coursesEventsParticipationsRead.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.Basic.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param coursePk 
     * @param eventPk 
     * @param participationPk 
     * @param {*} [options] Override http request options.
     */
    public coursesEventsParticipationsSlotsList (coursePk: string, eventPk: string, participationPk: string, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/courses/{course_pk}/events/{event_pk}/participations/{participation_pk}/slots/'
            .replace('{' + 'course_pk' + '}', encodeURIComponent(String(coursePk)))
            .replace('{' + 'event_pk' + '}', encodeURIComponent(String(eventPk)))
            .replace('{' + 'participation_pk' + '}', encodeURIComponent(String(participationPk)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'coursePk' is not null or undefined
        if (coursePk === null || coursePk === undefined) {
            throw new Error('Required parameter coursePk was null or undefined when calling coursesEventsParticipationsSlotsList.');
        }

        // verify required parameter 'eventPk' is not null or undefined
        if (eventPk === null || eventPk === undefined) {
            throw new Error('Required parameter eventPk was null or undefined when calling coursesEventsParticipationsSlotsList.');
        }

        // verify required parameter 'participationPk' is not null or undefined
        if (participationPk === null || participationPk === undefined) {
            throw new Error('Required parameter participationPk was null or undefined when calling coursesEventsParticipationsSlotsList.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.Basic.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param coursePk 
     * @param eventPk 
     * @param id 
     * @param participationPk 
     * @param {*} [options] Override http request options.
     */
    public coursesEventsParticipationsSlotsPartialUpdate (coursePk: string, eventPk: string, id: string, participationPk: string, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/courses/{course_pk}/events/{event_pk}/participations/{participation_pk}/slots/{id}/'
            .replace('{' + 'course_pk' + '}', encodeURIComponent(String(coursePk)))
            .replace('{' + 'event_pk' + '}', encodeURIComponent(String(eventPk)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)))
            .replace('{' + 'participation_pk' + '}', encodeURIComponent(String(participationPk)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'coursePk' is not null or undefined
        if (coursePk === null || coursePk === undefined) {
            throw new Error('Required parameter coursePk was null or undefined when calling coursesEventsParticipationsSlotsPartialUpdate.');
        }

        // verify required parameter 'eventPk' is not null or undefined
        if (eventPk === null || eventPk === undefined) {
            throw new Error('Required parameter eventPk was null or undefined when calling coursesEventsParticipationsSlotsPartialUpdate.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling coursesEventsParticipationsSlotsPartialUpdate.');
        }

        // verify required parameter 'participationPk' is not null or undefined
        if (participationPk === null || participationPk === undefined) {
            throw new Error('Required parameter participationPk was null or undefined when calling coursesEventsParticipationsSlotsPartialUpdate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PATCH',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.Basic.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param coursePk 
     * @param eventPk 
     * @param id 
     * @param participationPk 
     * @param {*} [options] Override http request options.
     */
    public coursesEventsParticipationsSlotsRead (coursePk: string, eventPk: string, id: string, participationPk: string, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/courses/{course_pk}/events/{event_pk}/participations/{participation_pk}/slots/{id}/'
            .replace('{' + 'course_pk' + '}', encodeURIComponent(String(coursePk)))
            .replace('{' + 'event_pk' + '}', encodeURIComponent(String(eventPk)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)))
            .replace('{' + 'participation_pk' + '}', encodeURIComponent(String(participationPk)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'coursePk' is not null or undefined
        if (coursePk === null || coursePk === undefined) {
            throw new Error('Required parameter coursePk was null or undefined when calling coursesEventsParticipationsSlotsRead.');
        }

        // verify required parameter 'eventPk' is not null or undefined
        if (eventPk === null || eventPk === undefined) {
            throw new Error('Required parameter eventPk was null or undefined when calling coursesEventsParticipationsSlotsRead.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling coursesEventsParticipationsSlotsRead.');
        }

        // verify required parameter 'participationPk' is not null or undefined
        if (participationPk === null || participationPk === undefined) {
            throw new Error('Required parameter participationPk was null or undefined when calling coursesEventsParticipationsSlotsRead.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.Basic.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param coursePk 
     * @param eventPk 
     * @param id 
     * @param participationPk 
     * @param {*} [options] Override http request options.
     */
    public coursesEventsParticipationsSlotsUpdate (coursePk: string, eventPk: string, id: string, participationPk: string, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/courses/{course_pk}/events/{event_pk}/participations/{participation_pk}/slots/{id}/'
            .replace('{' + 'course_pk' + '}', encodeURIComponent(String(coursePk)))
            .replace('{' + 'event_pk' + '}', encodeURIComponent(String(eventPk)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)))
            .replace('{' + 'participation_pk' + '}', encodeURIComponent(String(participationPk)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'coursePk' is not null or undefined
        if (coursePk === null || coursePk === undefined) {
            throw new Error('Required parameter coursePk was null or undefined when calling coursesEventsParticipationsSlotsUpdate.');
        }

        // verify required parameter 'eventPk' is not null or undefined
        if (eventPk === null || eventPk === undefined) {
            throw new Error('Required parameter eventPk was null or undefined when calling coursesEventsParticipationsSlotsUpdate.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling coursesEventsParticipationsSlotsUpdate.');
        }

        // verify required parameter 'participationPk' is not null or undefined
        if (participationPk === null || participationPk === undefined) {
            throw new Error('Required parameter participationPk was null or undefined when calling coursesEventsParticipationsSlotsUpdate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.Basic.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param coursePk 
     * @param eventPk 
     * @param id A unique integer value identifying this event participation.
     * @param {*} [options] Override http request options.
     */
    public coursesEventsParticipationsUpdate (coursePk: string, eventPk: string, id: number, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/courses/{course_pk}/events/{event_pk}/participations/{id}/'
            .replace('{' + 'course_pk' + '}', encodeURIComponent(String(coursePk)))
            .replace('{' + 'event_pk' + '}', encodeURIComponent(String(eventPk)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'coursePk' is not null or undefined
        if (coursePk === null || coursePk === undefined) {
            throw new Error('Required parameter coursePk was null or undefined when calling coursesEventsParticipationsUpdate.');
        }

        // verify required parameter 'eventPk' is not null or undefined
        if (eventPk === null || eventPk === undefined) {
            throw new Error('Required parameter eventPk was null or undefined when calling coursesEventsParticipationsUpdate.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling coursesEventsParticipationsUpdate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.Basic.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param coursePk 
     * @param id A unique integer value identifying this event.
     * @param {*} [options] Override http request options.
     */
    public coursesEventsRead (coursePk: string, id: number, options: any = {}) : Promise<{ response: http.ClientResponse; body: Event;  }> {
        const localVarPath = this.basePath + '/courses/{course_pk}/events/{id}/'
            .replace('{' + 'course_pk' + '}', encodeURIComponent(String(coursePk)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'coursePk' is not null or undefined
        if (coursePk === null || coursePk === undefined) {
            throw new Error('Required parameter coursePk was null or undefined when calling coursesEventsRead.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling coursesEventsRead.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.Basic.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Event;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Event");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param coursePk 
     * @param id A unique integer value identifying this event.
     * @param data 
     * @param {*} [options] Override http request options.
     */
    public coursesEventsUpdate (coursePk: string, id: number, data: Event, options: any = {}) : Promise<{ response: http.ClientResponse; body: Event;  }> {
        const localVarPath = this.basePath + '/courses/{course_pk}/events/{id}/'
            .replace('{' + 'course_pk' + '}', encodeURIComponent(String(coursePk)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'coursePk' is not null or undefined
        if (coursePk === null || coursePk === undefined) {
            throw new Error('Required parameter coursePk was null or undefined when calling coursesEventsUpdate.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling coursesEventsUpdate.');
        }

        // verify required parameter 'data' is not null or undefined
        if (data === null || data === undefined) {
            throw new Error('Required parameter data was null or undefined when calling coursesEventsUpdate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(data, "Event")
        };

        this.authentications.Basic.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Event;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Event");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param coursePk 
     * @param exercisePk 
     * @param data 
     * @param {*} [options] Override http request options.
     */
    public coursesExercisesChoicesCreate (coursePk: string, exercisePk: string, data: ExerciseChoice, options: any = {}) : Promise<{ response: http.ClientResponse; body: ExerciseChoice;  }> {
        const localVarPath = this.basePath + '/courses/{course_pk}/exercises/{exercise_pk}/choices/'
            .replace('{' + 'course_pk' + '}', encodeURIComponent(String(coursePk)))
            .replace('{' + 'exercise_pk' + '}', encodeURIComponent(String(exercisePk)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'coursePk' is not null or undefined
        if (coursePk === null || coursePk === undefined) {
            throw new Error('Required parameter coursePk was null or undefined when calling coursesExercisesChoicesCreate.');
        }

        // verify required parameter 'exercisePk' is not null or undefined
        if (exercisePk === null || exercisePk === undefined) {
            throw new Error('Required parameter exercisePk was null or undefined when calling coursesExercisesChoicesCreate.');
        }

        // verify required parameter 'data' is not null or undefined
        if (data === null || data === undefined) {
            throw new Error('Required parameter data was null or undefined when calling coursesExercisesChoicesCreate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(data, "ExerciseChoice")
        };

        this.authentications.Basic.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ExerciseChoice;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ExerciseChoice");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param coursePk 
     * @param exercisePk 
     * @param id A unique integer value identifying this exercise choice.
     * @param {*} [options] Override http request options.
     */
    public coursesExercisesChoicesDelete (coursePk: string, exercisePk: string, id: number, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/courses/{course_pk}/exercises/{exercise_pk}/choices/{id}/'
            .replace('{' + 'course_pk' + '}', encodeURIComponent(String(coursePk)))
            .replace('{' + 'exercise_pk' + '}', encodeURIComponent(String(exercisePk)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'coursePk' is not null or undefined
        if (coursePk === null || coursePk === undefined) {
            throw new Error('Required parameter coursePk was null or undefined when calling coursesExercisesChoicesDelete.');
        }

        // verify required parameter 'exercisePk' is not null or undefined
        if (exercisePk === null || exercisePk === undefined) {
            throw new Error('Required parameter exercisePk was null or undefined when calling coursesExercisesChoicesDelete.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling coursesExercisesChoicesDelete.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.Basic.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param coursePk 
     * @param exercisePk 
     * @param {*} [options] Override http request options.
     */
    public coursesExercisesChoicesList (coursePk: string, exercisePk: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: Array<ExerciseChoice>;  }> {
        const localVarPath = this.basePath + '/courses/{course_pk}/exercises/{exercise_pk}/choices/'
            .replace('{' + 'course_pk' + '}', encodeURIComponent(String(coursePk)))
            .replace('{' + 'exercise_pk' + '}', encodeURIComponent(String(exercisePk)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'coursePk' is not null or undefined
        if (coursePk === null || coursePk === undefined) {
            throw new Error('Required parameter coursePk was null or undefined when calling coursesExercisesChoicesList.');
        }

        // verify required parameter 'exercisePk' is not null or undefined
        if (exercisePk === null || exercisePk === undefined) {
            throw new Error('Required parameter exercisePk was null or undefined when calling coursesExercisesChoicesList.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.Basic.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<ExerciseChoice>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<ExerciseChoice>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param coursePk 
     * @param exercisePk 
     * @param id A unique integer value identifying this exercise choice.
     * @param data 
     * @param {*} [options] Override http request options.
     */
    public coursesExercisesChoicesPartialUpdate (coursePk: string, exercisePk: string, id: number, data: ExerciseChoice, options: any = {}) : Promise<{ response: http.ClientResponse; body: ExerciseChoice;  }> {
        const localVarPath = this.basePath + '/courses/{course_pk}/exercises/{exercise_pk}/choices/{id}/'
            .replace('{' + 'course_pk' + '}', encodeURIComponent(String(coursePk)))
            .replace('{' + 'exercise_pk' + '}', encodeURIComponent(String(exercisePk)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'coursePk' is not null or undefined
        if (coursePk === null || coursePk === undefined) {
            throw new Error('Required parameter coursePk was null or undefined when calling coursesExercisesChoicesPartialUpdate.');
        }

        // verify required parameter 'exercisePk' is not null or undefined
        if (exercisePk === null || exercisePk === undefined) {
            throw new Error('Required parameter exercisePk was null or undefined when calling coursesExercisesChoicesPartialUpdate.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling coursesExercisesChoicesPartialUpdate.');
        }

        // verify required parameter 'data' is not null or undefined
        if (data === null || data === undefined) {
            throw new Error('Required parameter data was null or undefined when calling coursesExercisesChoicesPartialUpdate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PATCH',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(data, "ExerciseChoice")
        };

        this.authentications.Basic.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ExerciseChoice;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ExerciseChoice");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param coursePk 
     * @param exercisePk 
     * @param id A unique integer value identifying this exercise choice.
     * @param {*} [options] Override http request options.
     */
    public coursesExercisesChoicesRead (coursePk: string, exercisePk: string, id: number, options: any = {}) : Promise<{ response: http.ClientResponse; body: ExerciseChoice;  }> {
        const localVarPath = this.basePath + '/courses/{course_pk}/exercises/{exercise_pk}/choices/{id}/'
            .replace('{' + 'course_pk' + '}', encodeURIComponent(String(coursePk)))
            .replace('{' + 'exercise_pk' + '}', encodeURIComponent(String(exercisePk)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'coursePk' is not null or undefined
        if (coursePk === null || coursePk === undefined) {
            throw new Error('Required parameter coursePk was null or undefined when calling coursesExercisesChoicesRead.');
        }

        // verify required parameter 'exercisePk' is not null or undefined
        if (exercisePk === null || exercisePk === undefined) {
            throw new Error('Required parameter exercisePk was null or undefined when calling coursesExercisesChoicesRead.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling coursesExercisesChoicesRead.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.Basic.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ExerciseChoice;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ExerciseChoice");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param coursePk 
     * @param exercisePk 
     * @param id A unique integer value identifying this exercise choice.
     * @param data 
     * @param {*} [options] Override http request options.
     */
    public coursesExercisesChoicesUpdate (coursePk: string, exercisePk: string, id: number, data: ExerciseChoice, options: any = {}) : Promise<{ response: http.ClientResponse; body: ExerciseChoice;  }> {
        const localVarPath = this.basePath + '/courses/{course_pk}/exercises/{exercise_pk}/choices/{id}/'
            .replace('{' + 'course_pk' + '}', encodeURIComponent(String(coursePk)))
            .replace('{' + 'exercise_pk' + '}', encodeURIComponent(String(exercisePk)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'coursePk' is not null or undefined
        if (coursePk === null || coursePk === undefined) {
            throw new Error('Required parameter coursePk was null or undefined when calling coursesExercisesChoicesUpdate.');
        }

        // verify required parameter 'exercisePk' is not null or undefined
        if (exercisePk === null || exercisePk === undefined) {
            throw new Error('Required parameter exercisePk was null or undefined when calling coursesExercisesChoicesUpdate.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling coursesExercisesChoicesUpdate.');
        }

        // verify required parameter 'data' is not null or undefined
        if (data === null || data === undefined) {
            throw new Error('Required parameter data was null or undefined when calling coursesExercisesChoicesUpdate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(data, "ExerciseChoice")
        };

        this.authentications.Basic.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: ExerciseChoice;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "ExerciseChoice");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param coursePk 
     * @param data 
     * @param {*} [options] Override http request options.
     */
    public coursesExercisesCreate (coursePk: string, data: Exercise, options: any = {}) : Promise<{ response: http.ClientResponse; body: Exercise;  }> {
        const localVarPath = this.basePath + '/courses/{course_pk}/exercises/'
            .replace('{' + 'course_pk' + '}', encodeURIComponent(String(coursePk)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'coursePk' is not null or undefined
        if (coursePk === null || coursePk === undefined) {
            throw new Error('Required parameter coursePk was null or undefined when calling coursesExercisesCreate.');
        }

        // verify required parameter 'data' is not null or undefined
        if (data === null || data === undefined) {
            throw new Error('Required parameter data was null or undefined when calling coursesExercisesCreate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(data, "Exercise")
        };

        this.authentications.Basic.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Exercise;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Exercise");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param coursePk 
     * @param id A unique integer value identifying this exercise.
     * @param {*} [options] Override http request options.
     */
    public coursesExercisesDelete (coursePk: string, id: number, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/courses/{course_pk}/exercises/{id}/'
            .replace('{' + 'course_pk' + '}', encodeURIComponent(String(coursePk)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'coursePk' is not null or undefined
        if (coursePk === null || coursePk === undefined) {
            throw new Error('Required parameter coursePk was null or undefined when calling coursesExercisesDelete.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling coursesExercisesDelete.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.Basic.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param coursePk 
     * @param {*} [options] Override http request options.
     */
    public coursesExercisesList (coursePk: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: Array<Exercise>;  }> {
        const localVarPath = this.basePath + '/courses/{course_pk}/exercises/'
            .replace('{' + 'course_pk' + '}', encodeURIComponent(String(coursePk)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'coursePk' is not null or undefined
        if (coursePk === null || coursePk === undefined) {
            throw new Error('Required parameter coursePk was null or undefined when calling coursesExercisesList.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.Basic.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Exercise>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Exercise>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param coursePk 
     * @param id A unique integer value identifying this exercise.
     * @param data 
     * @param {*} [options] Override http request options.
     */
    public coursesExercisesPartialUpdate (coursePk: string, id: number, data: Exercise, options: any = {}) : Promise<{ response: http.ClientResponse; body: Exercise;  }> {
        const localVarPath = this.basePath + '/courses/{course_pk}/exercises/{id}/'
            .replace('{' + 'course_pk' + '}', encodeURIComponent(String(coursePk)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'coursePk' is not null or undefined
        if (coursePk === null || coursePk === undefined) {
            throw new Error('Required parameter coursePk was null or undefined when calling coursesExercisesPartialUpdate.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling coursesExercisesPartialUpdate.');
        }

        // verify required parameter 'data' is not null or undefined
        if (data === null || data === undefined) {
            throw new Error('Required parameter data was null or undefined when calling coursesExercisesPartialUpdate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PATCH',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(data, "Exercise")
        };

        this.authentications.Basic.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Exercise;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Exercise");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param coursePk 
     * @param id A unique integer value identifying this exercise.
     * @param {*} [options] Override http request options.
     */
    public coursesExercisesRead (coursePk: string, id: number, options: any = {}) : Promise<{ response: http.ClientResponse; body: Exercise;  }> {
        const localVarPath = this.basePath + '/courses/{course_pk}/exercises/{id}/'
            .replace('{' + 'course_pk' + '}', encodeURIComponent(String(coursePk)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'coursePk' is not null or undefined
        if (coursePk === null || coursePk === undefined) {
            throw new Error('Required parameter coursePk was null or undefined when calling coursesExercisesRead.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling coursesExercisesRead.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.Basic.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Exercise;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Exercise");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param coursePk 
     * @param exercisePk 
     * @param data 
     * @param {*} [options] Override http request options.
     */
    public coursesExercisesSubExercisesCreate (coursePk: string, exercisePk: string, data: Exercise, options: any = {}) : Promise<{ response: http.ClientResponse; body: Exercise;  }> {
        const localVarPath = this.basePath + '/courses/{course_pk}/exercises/{exercise_pk}/sub_exercises/'
            .replace('{' + 'course_pk' + '}', encodeURIComponent(String(coursePk)))
            .replace('{' + 'exercise_pk' + '}', encodeURIComponent(String(exercisePk)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'coursePk' is not null or undefined
        if (coursePk === null || coursePk === undefined) {
            throw new Error('Required parameter coursePk was null or undefined when calling coursesExercisesSubExercisesCreate.');
        }

        // verify required parameter 'exercisePk' is not null or undefined
        if (exercisePk === null || exercisePk === undefined) {
            throw new Error('Required parameter exercisePk was null or undefined when calling coursesExercisesSubExercisesCreate.');
        }

        // verify required parameter 'data' is not null or undefined
        if (data === null || data === undefined) {
            throw new Error('Required parameter data was null or undefined when calling coursesExercisesSubExercisesCreate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(data, "Exercise")
        };

        this.authentications.Basic.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Exercise;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Exercise");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param coursePk 
     * @param exercisePk 
     * @param id A unique integer value identifying this exercise.
     * @param {*} [options] Override http request options.
     */
    public coursesExercisesSubExercisesDelete (coursePk: string, exercisePk: string, id: number, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/courses/{course_pk}/exercises/{exercise_pk}/sub_exercises/{id}/'
            .replace('{' + 'course_pk' + '}', encodeURIComponent(String(coursePk)))
            .replace('{' + 'exercise_pk' + '}', encodeURIComponent(String(exercisePk)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'coursePk' is not null or undefined
        if (coursePk === null || coursePk === undefined) {
            throw new Error('Required parameter coursePk was null or undefined when calling coursesExercisesSubExercisesDelete.');
        }

        // verify required parameter 'exercisePk' is not null or undefined
        if (exercisePk === null || exercisePk === undefined) {
            throw new Error('Required parameter exercisePk was null or undefined when calling coursesExercisesSubExercisesDelete.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling coursesExercisesSubExercisesDelete.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.Basic.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param coursePk 
     * @param exercisePk 
     * @param {*} [options] Override http request options.
     */
    public coursesExercisesSubExercisesList (coursePk: string, exercisePk: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: Array<Exercise>;  }> {
        const localVarPath = this.basePath + '/courses/{course_pk}/exercises/{exercise_pk}/sub_exercises/'
            .replace('{' + 'course_pk' + '}', encodeURIComponent(String(coursePk)))
            .replace('{' + 'exercise_pk' + '}', encodeURIComponent(String(exercisePk)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'coursePk' is not null or undefined
        if (coursePk === null || coursePk === undefined) {
            throw new Error('Required parameter coursePk was null or undefined when calling coursesExercisesSubExercisesList.');
        }

        // verify required parameter 'exercisePk' is not null or undefined
        if (exercisePk === null || exercisePk === undefined) {
            throw new Error('Required parameter exercisePk was null or undefined when calling coursesExercisesSubExercisesList.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.Basic.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Exercise>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Exercise>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param coursePk 
     * @param exercisePk 
     * @param id A unique integer value identifying this exercise.
     * @param data 
     * @param {*} [options] Override http request options.
     */
    public coursesExercisesSubExercisesPartialUpdate (coursePk: string, exercisePk: string, id: number, data: Exercise, options: any = {}) : Promise<{ response: http.ClientResponse; body: Exercise;  }> {
        const localVarPath = this.basePath + '/courses/{course_pk}/exercises/{exercise_pk}/sub_exercises/{id}/'
            .replace('{' + 'course_pk' + '}', encodeURIComponent(String(coursePk)))
            .replace('{' + 'exercise_pk' + '}', encodeURIComponent(String(exercisePk)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'coursePk' is not null or undefined
        if (coursePk === null || coursePk === undefined) {
            throw new Error('Required parameter coursePk was null or undefined when calling coursesExercisesSubExercisesPartialUpdate.');
        }

        // verify required parameter 'exercisePk' is not null or undefined
        if (exercisePk === null || exercisePk === undefined) {
            throw new Error('Required parameter exercisePk was null or undefined when calling coursesExercisesSubExercisesPartialUpdate.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling coursesExercisesSubExercisesPartialUpdate.');
        }

        // verify required parameter 'data' is not null or undefined
        if (data === null || data === undefined) {
            throw new Error('Required parameter data was null or undefined when calling coursesExercisesSubExercisesPartialUpdate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PATCH',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(data, "Exercise")
        };

        this.authentications.Basic.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Exercise;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Exercise");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param coursePk 
     * @param exercisePk 
     * @param id A unique integer value identifying this exercise.
     * @param {*} [options] Override http request options.
     */
    public coursesExercisesSubExercisesRead (coursePk: string, exercisePk: string, id: number, options: any = {}) : Promise<{ response: http.ClientResponse; body: Exercise;  }> {
        const localVarPath = this.basePath + '/courses/{course_pk}/exercises/{exercise_pk}/sub_exercises/{id}/'
            .replace('{' + 'course_pk' + '}', encodeURIComponent(String(coursePk)))
            .replace('{' + 'exercise_pk' + '}', encodeURIComponent(String(exercisePk)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'coursePk' is not null or undefined
        if (coursePk === null || coursePk === undefined) {
            throw new Error('Required parameter coursePk was null or undefined when calling coursesExercisesSubExercisesRead.');
        }

        // verify required parameter 'exercisePk' is not null or undefined
        if (exercisePk === null || exercisePk === undefined) {
            throw new Error('Required parameter exercisePk was null or undefined when calling coursesExercisesSubExercisesRead.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling coursesExercisesSubExercisesRead.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.Basic.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Exercise;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Exercise");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param coursePk 
     * @param exercisePk 
     * @param id A unique integer value identifying this exercise.
     * @param data 
     * @param {*} [options] Override http request options.
     */
    public coursesExercisesSubExercisesUpdate (coursePk: string, exercisePk: string, id: number, data: Exercise, options: any = {}) : Promise<{ response: http.ClientResponse; body: Exercise;  }> {
        const localVarPath = this.basePath + '/courses/{course_pk}/exercises/{exercise_pk}/sub_exercises/{id}/'
            .replace('{' + 'course_pk' + '}', encodeURIComponent(String(coursePk)))
            .replace('{' + 'exercise_pk' + '}', encodeURIComponent(String(exercisePk)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'coursePk' is not null or undefined
        if (coursePk === null || coursePk === undefined) {
            throw new Error('Required parameter coursePk was null or undefined when calling coursesExercisesSubExercisesUpdate.');
        }

        // verify required parameter 'exercisePk' is not null or undefined
        if (exercisePk === null || exercisePk === undefined) {
            throw new Error('Required parameter exercisePk was null or undefined when calling coursesExercisesSubExercisesUpdate.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling coursesExercisesSubExercisesUpdate.');
        }

        // verify required parameter 'data' is not null or undefined
        if (data === null || data === undefined) {
            throw new Error('Required parameter data was null or undefined when calling coursesExercisesSubExercisesUpdate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(data, "Exercise")
        };

        this.authentications.Basic.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Exercise;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Exercise");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param coursePk 
     * @param id A unique integer value identifying this exercise.
     * @param data 
     * @param {*} [options] Override http request options.
     */
    public coursesExercisesUpdate (coursePk: string, id: number, data: Exercise, options: any = {}) : Promise<{ response: http.ClientResponse; body: Exercise;  }> {
        const localVarPath = this.basePath + '/courses/{course_pk}/exercises/{id}/'
            .replace('{' + 'course_pk' + '}', encodeURIComponent(String(coursePk)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'coursePk' is not null or undefined
        if (coursePk === null || coursePk === undefined) {
            throw new Error('Required parameter coursePk was null or undefined when calling coursesExercisesUpdate.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling coursesExercisesUpdate.');
        }

        // verify required parameter 'data' is not null or undefined
        if (data === null || data === undefined) {
            throw new Error('Required parameter data was null or undefined when calling coursesExercisesUpdate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(data, "Exercise")
        };

        this.authentications.Basic.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Exercise;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Exercise");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param {*} [options] Override http request options.
     */
    public coursesList (options: any = {}) : Promise<{ response: http.ClientResponse; body: Array<Course>;  }> {
        const localVarPath = this.basePath + '/courses/';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.Basic.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<Course>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<Course>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param id A unique integer value identifying this course.
     * @param data 
     * @param {*} [options] Override http request options.
     */
    public coursesPartialUpdate (id: number, data: Course, options: any = {}) : Promise<{ response: http.ClientResponse; body: Course;  }> {
        const localVarPath = this.basePath + '/courses/{id}/'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling coursesPartialUpdate.');
        }

        // verify required parameter 'data' is not null or undefined
        if (data === null || data === undefined) {
            throw new Error('Required parameter data was null or undefined when calling coursesPartialUpdate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PATCH',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(data, "Course")
        };

        this.authentications.Basic.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Course;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Course");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param id A unique integer value identifying this course.
     * @param {*} [options] Override http request options.
     */
    public coursesRead (id: number, options: any = {}) : Promise<{ response: http.ClientResponse; body: Course;  }> {
        const localVarPath = this.basePath + '/courses/{id}/'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling coursesRead.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.Basic.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Course;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Course");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param coursePk 
     * @param data 
     * @param {*} [options] Override http request options.
     */
    public coursesTemplatesCreate (coursePk: string, data: EventTemplate, options: any = {}) : Promise<{ response: http.ClientResponse; body: EventTemplate;  }> {
        const localVarPath = this.basePath + '/courses/{course_pk}/templates/'
            .replace('{' + 'course_pk' + '}', encodeURIComponent(String(coursePk)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'coursePk' is not null or undefined
        if (coursePk === null || coursePk === undefined) {
            throw new Error('Required parameter coursePk was null or undefined when calling coursesTemplatesCreate.');
        }

        // verify required parameter 'data' is not null or undefined
        if (data === null || data === undefined) {
            throw new Error('Required parameter data was null or undefined when calling coursesTemplatesCreate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(data, "EventTemplate")
        };

        this.authentications.Basic.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: EventTemplate;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "EventTemplate");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param coursePk 
     * @param id A unique integer value identifying this event template.
     * @param {*} [options] Override http request options.
     */
    public coursesTemplatesDelete (coursePk: string, id: number, options: any = {}) : Promise<{ response: http.ClientResponse; body?: any;  }> {
        const localVarPath = this.basePath + '/courses/{course_pk}/templates/{id}/'
            .replace('{' + 'course_pk' + '}', encodeURIComponent(String(coursePk)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'coursePk' is not null or undefined
        if (coursePk === null || coursePk === undefined) {
            throw new Error('Required parameter coursePk was null or undefined when calling coursesTemplatesDelete.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling coursesTemplatesDelete.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.Basic.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param coursePk 
     * @param {*} [options] Override http request options.
     */
    public coursesTemplatesList (coursePk: string, options: any = {}) : Promise<{ response: http.ClientResponse; body: Array<EventTemplate>;  }> {
        const localVarPath = this.basePath + '/courses/{course_pk}/templates/'
            .replace('{' + 'course_pk' + '}', encodeURIComponent(String(coursePk)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'coursePk' is not null or undefined
        if (coursePk === null || coursePk === undefined) {
            throw new Error('Required parameter coursePk was null or undefined when calling coursesTemplatesList.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.Basic.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Array<EventTemplate>;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Array<EventTemplate>");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param coursePk 
     * @param id A unique integer value identifying this event template.
     * @param data 
     * @param {*} [options] Override http request options.
     */
    public coursesTemplatesPartialUpdate (coursePk: string, id: number, data: EventTemplate, options: any = {}) : Promise<{ response: http.ClientResponse; body: EventTemplate;  }> {
        const localVarPath = this.basePath + '/courses/{course_pk}/templates/{id}/'
            .replace('{' + 'course_pk' + '}', encodeURIComponent(String(coursePk)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'coursePk' is not null or undefined
        if (coursePk === null || coursePk === undefined) {
            throw new Error('Required parameter coursePk was null or undefined when calling coursesTemplatesPartialUpdate.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling coursesTemplatesPartialUpdate.');
        }

        // verify required parameter 'data' is not null or undefined
        if (data === null || data === undefined) {
            throw new Error('Required parameter data was null or undefined when calling coursesTemplatesPartialUpdate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PATCH',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(data, "EventTemplate")
        };

        this.authentications.Basic.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: EventTemplate;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "EventTemplate");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param coursePk 
     * @param id A unique integer value identifying this event template.
     * @param {*} [options] Override http request options.
     */
    public coursesTemplatesRead (coursePk: string, id: number, options: any = {}) : Promise<{ response: http.ClientResponse; body: EventTemplate;  }> {
        const localVarPath = this.basePath + '/courses/{course_pk}/templates/{id}/'
            .replace('{' + 'course_pk' + '}', encodeURIComponent(String(coursePk)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'coursePk' is not null or undefined
        if (coursePk === null || coursePk === undefined) {
            throw new Error('Required parameter coursePk was null or undefined when calling coursesTemplatesRead.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling coursesTemplatesRead.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.Basic.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: EventTemplate;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "EventTemplate");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param coursePk 
     * @param id A unique integer value identifying this event template.
     * @param data 
     * @param {*} [options] Override http request options.
     */
    public coursesTemplatesUpdate (coursePk: string, id: number, data: EventTemplate, options: any = {}) : Promise<{ response: http.ClientResponse; body: EventTemplate;  }> {
        const localVarPath = this.basePath + '/courses/{course_pk}/templates/{id}/'
            .replace('{' + 'course_pk' + '}', encodeURIComponent(String(coursePk)))
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'coursePk' is not null or undefined
        if (coursePk === null || coursePk === undefined) {
            throw new Error('Required parameter coursePk was null or undefined when calling coursesTemplatesUpdate.');
        }

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling coursesTemplatesUpdate.');
        }

        // verify required parameter 'data' is not null or undefined
        if (data === null || data === undefined) {
            throw new Error('Required parameter data was null or undefined when calling coursesTemplatesUpdate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(data, "EventTemplate")
        };

        this.authentications.Basic.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: EventTemplate;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "EventTemplate");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * @param id A unique integer value identifying this course.
     * @param data 
     * @param {*} [options] Override http request options.
     */
    public coursesUpdate (id: number, data: Course, options: any = {}) : Promise<{ response: http.ClientResponse; body: Course;  }> {
        const localVarPath = this.basePath + '/courses/{id}/'
            .replace('{' + 'id' + '}', encodeURIComponent(String(id)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling coursesUpdate.');
        }

        // verify required parameter 'data' is not null or undefined
        if (data === null || data === undefined) {
            throw new Error('Required parameter data was null or undefined when calling coursesUpdate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(data, "Course")
        };

        this.authentications.Basic.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Course;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Course");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
