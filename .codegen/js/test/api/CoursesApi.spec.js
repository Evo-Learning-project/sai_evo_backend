/*
 * Snippets API
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.23
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SnippetsApi);
  }
}(this, function(expect, SnippetsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SnippetsApi.CoursesApi();
  });

  describe('(package)', function() {
    describe('CoursesApi', function() {
      describe('coursesCreate', function() {
        it('should call coursesCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for coursesCreate call and complete the assertions
          /*
          var data = new SnippetsApi.Course();
          data.name = "";
          data.description = "";

          instance.coursesCreate(data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SnippetsApi.Course);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.creator).to.be.a('number');
            expect(data.creator).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coursesDelete', function() {
        it('should call coursesDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for coursesDelete call
          /*
          var id = 56;

          instance.coursesDelete(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coursesEventsCreate', function() {
        it('should call coursesEventsCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for coursesEventsCreate call and complete the assertions
          /*
          var coursePk = "coursePk_example";
          var data = new SnippetsApi.Event();
          data.name = "";
          data.instructions = "";
          data.beginTimestamp = new Date();
          data.endTimestamp = new Date();
          data.eventType = 0;
          data.progressionRule = 0;
          data.state = 0;

          instance.coursesEventsCreate(coursePk, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SnippetsApi.Event);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.instructions).to.be.a('string');
            expect(data.instructions).to.be("");
            expect(data.beginTimestamp).to.be.a(Date);
            expect(data.beginTimestamp).to.be(new Date());
            expect(data.endTimestamp).to.be.a(Date);
            expect(data.endTimestamp).to.be(new Date());
            expect(data.eventType).to.be.a('number');
            expect(data.eventType).to.be(0);
            expect(data.progressionRule).to.be.a('number');
            expect(data.progressionRule).to.be(0);
            expect(data.state).to.be.a('number');
            expect(data.state).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coursesEventsDelete', function() {
        it('should call coursesEventsDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for coursesEventsDelete call
          /*
          var coursePk = "coursePk_example";
          var id = 56;

          instance.coursesEventsDelete(coursePk, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coursesEventsList', function() {
        it('should call coursesEventsList successfully', function(done) {
          // TODO: uncomment, update parameter values for coursesEventsList call and complete the assertions
          /*
          var coursePk = "coursePk_example";

          instance.coursesEventsList(coursePk, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SnippetsApi.Event);
              expect(data.id).to.be.a('number');
              expect(data.id).to.be(0);
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.instructions).to.be.a('string');
              expect(data.instructions).to.be("");
              expect(data.beginTimestamp).to.be.a(Date);
              expect(data.beginTimestamp).to.be(new Date());
              expect(data.endTimestamp).to.be.a(Date);
              expect(data.endTimestamp).to.be(new Date());
              expect(data.eventType).to.be.a('number');
              expect(data.eventType).to.be(0);
              expect(data.progressionRule).to.be.a('number');
              expect(data.progressionRule).to.be(0);
              expect(data.state).to.be.a('number');
              expect(data.state).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coursesEventsPartialUpdate', function() {
        it('should call coursesEventsPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for coursesEventsPartialUpdate call and complete the assertions
          /*
          var coursePk = "coursePk_example";
          var id = 56;
          var data = new SnippetsApi.Event();
          data.name = "";
          data.instructions = "";
          data.beginTimestamp = new Date();
          data.endTimestamp = new Date();
          data.eventType = 0;
          data.progressionRule = 0;
          data.state = 0;

          instance.coursesEventsPartialUpdate(coursePk, id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SnippetsApi.Event);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.instructions).to.be.a('string');
            expect(data.instructions).to.be("");
            expect(data.beginTimestamp).to.be.a(Date);
            expect(data.beginTimestamp).to.be(new Date());
            expect(data.endTimestamp).to.be.a(Date);
            expect(data.endTimestamp).to.be(new Date());
            expect(data.eventType).to.be.a('number');
            expect(data.eventType).to.be(0);
            expect(data.progressionRule).to.be.a('number');
            expect(data.progressionRule).to.be(0);
            expect(data.state).to.be.a('number');
            expect(data.state).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coursesEventsParticipationsCreate', function() {
        it('should call coursesEventsParticipationsCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for coursesEventsParticipationsCreate call
          /*
          var coursePk = "coursePk_example";
          var eventPk = "eventPk_example";

          instance.coursesEventsParticipationsCreate(coursePk, eventPk, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coursesEventsParticipationsList', function() {
        it('should call coursesEventsParticipationsList successfully', function(done) {
          // TODO: uncomment, update parameter values for coursesEventsParticipationsList call
          /*
          var coursePk = "coursePk_example";
          var eventPk = "eventPk_example";

          instance.coursesEventsParticipationsList(coursePk, eventPk, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coursesEventsParticipationsPartialUpdate', function() {
        it('should call coursesEventsParticipationsPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for coursesEventsParticipationsPartialUpdate call
          /*
          var coursePk = "coursePk_example";
          var eventPk = "eventPk_example";
          var id = 56;

          instance.coursesEventsParticipationsPartialUpdate(coursePk, eventPk, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coursesEventsParticipationsRead', function() {
        it('should call coursesEventsParticipationsRead successfully', function(done) {
          // TODO: uncomment, update parameter values for coursesEventsParticipationsRead call
          /*
          var coursePk = "coursePk_example";
          var eventPk = "eventPk_example";
          var id = 56;

          instance.coursesEventsParticipationsRead(coursePk, eventPk, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coursesEventsParticipationsSlotsList', function() {
        it('should call coursesEventsParticipationsSlotsList successfully', function(done) {
          // TODO: uncomment, update parameter values for coursesEventsParticipationsSlotsList call
          /*
          var coursePk = "coursePk_example";
          var eventPk = "eventPk_example";
          var participationPk = "participationPk_example";

          instance.coursesEventsParticipationsSlotsList(coursePk, eventPk, participationPk, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coursesEventsParticipationsSlotsPartialUpdate', function() {
        it('should call coursesEventsParticipationsSlotsPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for coursesEventsParticipationsSlotsPartialUpdate call
          /*
          var coursePk = "coursePk_example";
          var eventPk = "eventPk_example";
          var id = "id_example";
          var participationPk = "participationPk_example";

          instance.coursesEventsParticipationsSlotsPartialUpdate(coursePk, eventPk, id, participationPk, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coursesEventsParticipationsSlotsRead', function() {
        it('should call coursesEventsParticipationsSlotsRead successfully', function(done) {
          // TODO: uncomment, update parameter values for coursesEventsParticipationsSlotsRead call
          /*
          var coursePk = "coursePk_example";
          var eventPk = "eventPk_example";
          var id = "id_example";
          var participationPk = "participationPk_example";

          instance.coursesEventsParticipationsSlotsRead(coursePk, eventPk, id, participationPk, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coursesEventsParticipationsSlotsUpdate', function() {
        it('should call coursesEventsParticipationsSlotsUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for coursesEventsParticipationsSlotsUpdate call
          /*
          var coursePk = "coursePk_example";
          var eventPk = "eventPk_example";
          var id = "id_example";
          var participationPk = "participationPk_example";

          instance.coursesEventsParticipationsSlotsUpdate(coursePk, eventPk, id, participationPk, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coursesEventsParticipationsUpdate', function() {
        it('should call coursesEventsParticipationsUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for coursesEventsParticipationsUpdate call
          /*
          var coursePk = "coursePk_example";
          var eventPk = "eventPk_example";
          var id = 56;

          instance.coursesEventsParticipationsUpdate(coursePk, eventPk, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coursesEventsRead', function() {
        it('should call coursesEventsRead successfully', function(done) {
          // TODO: uncomment, update parameter values for coursesEventsRead call and complete the assertions
          /*
          var coursePk = "coursePk_example";
          var id = 56;

          instance.coursesEventsRead(coursePk, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SnippetsApi.Event);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.instructions).to.be.a('string');
            expect(data.instructions).to.be("");
            expect(data.beginTimestamp).to.be.a(Date);
            expect(data.beginTimestamp).to.be(new Date());
            expect(data.endTimestamp).to.be.a(Date);
            expect(data.endTimestamp).to.be(new Date());
            expect(data.eventType).to.be.a('number');
            expect(data.eventType).to.be(0);
            expect(data.progressionRule).to.be.a('number');
            expect(data.progressionRule).to.be(0);
            expect(data.state).to.be.a('number');
            expect(data.state).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coursesEventsUpdate', function() {
        it('should call coursesEventsUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for coursesEventsUpdate call and complete the assertions
          /*
          var coursePk = "coursePk_example";
          var id = 56;
          var data = new SnippetsApi.Event();
          data.name = "";
          data.instructions = "";
          data.beginTimestamp = new Date();
          data.endTimestamp = new Date();
          data.eventType = 0;
          data.progressionRule = 0;
          data.state = 0;

          instance.coursesEventsUpdate(coursePk, id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SnippetsApi.Event);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.instructions).to.be.a('string');
            expect(data.instructions).to.be("");
            expect(data.beginTimestamp).to.be.a(Date);
            expect(data.beginTimestamp).to.be(new Date());
            expect(data.endTimestamp).to.be.a(Date);
            expect(data.endTimestamp).to.be(new Date());
            expect(data.eventType).to.be.a('number');
            expect(data.eventType).to.be(0);
            expect(data.progressionRule).to.be.a('number');
            expect(data.progressionRule).to.be(0);
            expect(data.state).to.be.a('number');
            expect(data.state).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coursesExercisesChoicesCreate', function() {
        it('should call coursesExercisesChoicesCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for coursesExercisesChoicesCreate call and complete the assertions
          /*
          var coursePk = "coursePk_example";
          var exercisePk = "exercisePk_example";
          var data = new SnippetsApi.ExerciseChoice();
          data.text = "";
          data.score = "";

          instance.coursesExercisesChoicesCreate(coursePk, exercisePk, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SnippetsApi.ExerciseChoice);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.text).to.be.a('string');
            expect(data.text).to.be("");
            expect(data.score).to.be.a('string');
            expect(data.score).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coursesExercisesChoicesDelete', function() {
        it('should call coursesExercisesChoicesDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for coursesExercisesChoicesDelete call
          /*
          var coursePk = "coursePk_example";
          var exercisePk = "exercisePk_example";
          var id = 56;

          instance.coursesExercisesChoicesDelete(coursePk, exercisePk, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coursesExercisesChoicesList', function() {
        it('should call coursesExercisesChoicesList successfully', function(done) {
          // TODO: uncomment, update parameter values for coursesExercisesChoicesList call and complete the assertions
          /*
          var coursePk = "coursePk_example";
          var exercisePk = "exercisePk_example";

          instance.coursesExercisesChoicesList(coursePk, exercisePk, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SnippetsApi.ExerciseChoice);
              expect(data.id).to.be.a('number');
              expect(data.id).to.be(0);
              expect(data.text).to.be.a('string');
              expect(data.text).to.be("");
              expect(data.score).to.be.a('string');
              expect(data.score).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coursesExercisesChoicesPartialUpdate', function() {
        it('should call coursesExercisesChoicesPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for coursesExercisesChoicesPartialUpdate call and complete the assertions
          /*
          var coursePk = "coursePk_example";
          var exercisePk = "exercisePk_example";
          var id = 56;
          var data = new SnippetsApi.ExerciseChoice();
          data.text = "";
          data.score = "";

          instance.coursesExercisesChoicesPartialUpdate(coursePk, exercisePk, id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SnippetsApi.ExerciseChoice);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.text).to.be.a('string');
            expect(data.text).to.be("");
            expect(data.score).to.be.a('string');
            expect(data.score).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coursesExercisesChoicesRead', function() {
        it('should call coursesExercisesChoicesRead successfully', function(done) {
          // TODO: uncomment, update parameter values for coursesExercisesChoicesRead call and complete the assertions
          /*
          var coursePk = "coursePk_example";
          var exercisePk = "exercisePk_example";
          var id = 56;

          instance.coursesExercisesChoicesRead(coursePk, exercisePk, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SnippetsApi.ExerciseChoice);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.text).to.be.a('string');
            expect(data.text).to.be("");
            expect(data.score).to.be.a('string');
            expect(data.score).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coursesExercisesChoicesUpdate', function() {
        it('should call coursesExercisesChoicesUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for coursesExercisesChoicesUpdate call and complete the assertions
          /*
          var coursePk = "coursePk_example";
          var exercisePk = "exercisePk_example";
          var id = 56;
          var data = new SnippetsApi.ExerciseChoice();
          data.text = "";
          data.score = "";

          instance.coursesExercisesChoicesUpdate(coursePk, exercisePk, id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SnippetsApi.ExerciseChoice);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.text).to.be.a('string');
            expect(data.text).to.be("");
            expect(data.score).to.be.a('string');
            expect(data.score).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coursesExercisesCreate', function() {
        it('should call coursesExercisesCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for coursesExercisesCreate call and complete the assertions
          /*
          var coursePk = "coursePk_example";
          var data = new SnippetsApi.Exercise();
          data.text = "";
          data.exerciseType = 0;
          data.solution = "";
          data.state = 0;
          data.subExercises = "";
          data.choices = [new SnippetsApi.ExerciseChoice()];
          data.choices[0].text = "";
          data.choices[0].score = "";

          instance.coursesExercisesCreate(coursePk, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SnippetsApi.Exercise);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.text).to.be.a('string');
            expect(data.text).to.be("");
            expect(data.exerciseType).to.be.a('number');
            expect(data.exerciseType).to.be(0);
            expect(data.solution).to.be.a('string');
            expect(data.solution).to.be("");
            expect(data.state).to.be.a('number');
            expect(data.state).to.be(0);
            expect(data.subExercises).to.be.a('string');
            expect(data.subExercises).to.be("");
            {
              let dataCtr = data.choices;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SnippetsApi.ExerciseChoice);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.text).to.be.a('string');
                expect(data.text).to.be("");
                expect(data.score).to.be.a('string');
                expect(data.score).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coursesExercisesDelete', function() {
        it('should call coursesExercisesDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for coursesExercisesDelete call
          /*
          var coursePk = "coursePk_example";
          var id = 56;

          instance.coursesExercisesDelete(coursePk, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coursesExercisesList', function() {
        it('should call coursesExercisesList successfully', function(done) {
          // TODO: uncomment, update parameter values for coursesExercisesList call and complete the assertions
          /*
          var coursePk = "coursePk_example";

          instance.coursesExercisesList(coursePk, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SnippetsApi.Exercise);
              expect(data.id).to.be.a('number');
              expect(data.id).to.be(0);
              expect(data.text).to.be.a('string');
              expect(data.text).to.be("");
              expect(data.exerciseType).to.be.a('number');
              expect(data.exerciseType).to.be(0);
              expect(data.solution).to.be.a('string');
              expect(data.solution).to.be("");
              expect(data.state).to.be.a('number');
              expect(data.state).to.be(0);
              expect(data.subExercises).to.be.a('string');
              expect(data.subExercises).to.be("");
              {
                let dataCtr = data.choices;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SnippetsApi.ExerciseChoice);
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be(0);
                  expect(data.text).to.be.a('string');
                  expect(data.text).to.be("");
                  expect(data.score).to.be.a('string');
                  expect(data.score).to.be("");
  
                        }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coursesExercisesPartialUpdate', function() {
        it('should call coursesExercisesPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for coursesExercisesPartialUpdate call and complete the assertions
          /*
          var coursePk = "coursePk_example";
          var id = 56;
          var data = new SnippetsApi.Exercise();
          data.text = "";
          data.exerciseType = 0;
          data.solution = "";
          data.state = 0;
          data.subExercises = "";
          data.choices = [new SnippetsApi.ExerciseChoice()];
          data.choices[0].text = "";
          data.choices[0].score = "";

          instance.coursesExercisesPartialUpdate(coursePk, id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SnippetsApi.Exercise);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.text).to.be.a('string');
            expect(data.text).to.be("");
            expect(data.exerciseType).to.be.a('number');
            expect(data.exerciseType).to.be(0);
            expect(data.solution).to.be.a('string');
            expect(data.solution).to.be("");
            expect(data.state).to.be.a('number');
            expect(data.state).to.be(0);
            expect(data.subExercises).to.be.a('string');
            expect(data.subExercises).to.be("");
            {
              let dataCtr = data.choices;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SnippetsApi.ExerciseChoice);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.text).to.be.a('string');
                expect(data.text).to.be("");
                expect(data.score).to.be.a('string');
                expect(data.score).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coursesExercisesRead', function() {
        it('should call coursesExercisesRead successfully', function(done) {
          // TODO: uncomment, update parameter values for coursesExercisesRead call and complete the assertions
          /*
          var coursePk = "coursePk_example";
          var id = 56;

          instance.coursesExercisesRead(coursePk, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SnippetsApi.Exercise);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.text).to.be.a('string');
            expect(data.text).to.be("");
            expect(data.exerciseType).to.be.a('number');
            expect(data.exerciseType).to.be(0);
            expect(data.solution).to.be.a('string');
            expect(data.solution).to.be("");
            expect(data.state).to.be.a('number');
            expect(data.state).to.be(0);
            expect(data.subExercises).to.be.a('string');
            expect(data.subExercises).to.be("");
            {
              let dataCtr = data.choices;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SnippetsApi.ExerciseChoice);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.text).to.be.a('string');
                expect(data.text).to.be("");
                expect(data.score).to.be.a('string');
                expect(data.score).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coursesExercisesSubExercisesCreate', function() {
        it('should call coursesExercisesSubExercisesCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for coursesExercisesSubExercisesCreate call and complete the assertions
          /*
          var coursePk = "coursePk_example";
          var exercisePk = "exercisePk_example";
          var data = new SnippetsApi.Exercise();
          data.text = "";
          data.exerciseType = 0;
          data.solution = "";
          data.state = 0;
          data.subExercises = "";
          data.choices = [new SnippetsApi.ExerciseChoice()];
          data.choices[0].text = "";
          data.choices[0].score = "";

          instance.coursesExercisesSubExercisesCreate(coursePk, exercisePk, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SnippetsApi.Exercise);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.text).to.be.a('string');
            expect(data.text).to.be("");
            expect(data.exerciseType).to.be.a('number');
            expect(data.exerciseType).to.be(0);
            expect(data.solution).to.be.a('string');
            expect(data.solution).to.be("");
            expect(data.state).to.be.a('number');
            expect(data.state).to.be(0);
            expect(data.subExercises).to.be.a('string');
            expect(data.subExercises).to.be("");
            {
              let dataCtr = data.choices;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SnippetsApi.ExerciseChoice);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.text).to.be.a('string');
                expect(data.text).to.be("");
                expect(data.score).to.be.a('string');
                expect(data.score).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coursesExercisesSubExercisesDelete', function() {
        it('should call coursesExercisesSubExercisesDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for coursesExercisesSubExercisesDelete call
          /*
          var coursePk = "coursePk_example";
          var exercisePk = "exercisePk_example";
          var id = 56;

          instance.coursesExercisesSubExercisesDelete(coursePk, exercisePk, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coursesExercisesSubExercisesList', function() {
        it('should call coursesExercisesSubExercisesList successfully', function(done) {
          // TODO: uncomment, update parameter values for coursesExercisesSubExercisesList call and complete the assertions
          /*
          var coursePk = "coursePk_example";
          var exercisePk = "exercisePk_example";

          instance.coursesExercisesSubExercisesList(coursePk, exercisePk, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SnippetsApi.Exercise);
              expect(data.id).to.be.a('number');
              expect(data.id).to.be(0);
              expect(data.text).to.be.a('string');
              expect(data.text).to.be("");
              expect(data.exerciseType).to.be.a('number');
              expect(data.exerciseType).to.be(0);
              expect(data.solution).to.be.a('string');
              expect(data.solution).to.be("");
              expect(data.state).to.be.a('number');
              expect(data.state).to.be(0);
              expect(data.subExercises).to.be.a('string');
              expect(data.subExercises).to.be("");
              {
                let dataCtr = data.choices;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SnippetsApi.ExerciseChoice);
                  expect(data.id).to.be.a('number');
                  expect(data.id).to.be(0);
                  expect(data.text).to.be.a('string');
                  expect(data.text).to.be("");
                  expect(data.score).to.be.a('string');
                  expect(data.score).to.be("");
  
                        }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coursesExercisesSubExercisesPartialUpdate', function() {
        it('should call coursesExercisesSubExercisesPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for coursesExercisesSubExercisesPartialUpdate call and complete the assertions
          /*
          var coursePk = "coursePk_example";
          var exercisePk = "exercisePk_example";
          var id = 56;
          var data = new SnippetsApi.Exercise();
          data.text = "";
          data.exerciseType = 0;
          data.solution = "";
          data.state = 0;
          data.subExercises = "";
          data.choices = [new SnippetsApi.ExerciseChoice()];
          data.choices[0].text = "";
          data.choices[0].score = "";

          instance.coursesExercisesSubExercisesPartialUpdate(coursePk, exercisePk, id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SnippetsApi.Exercise);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.text).to.be.a('string');
            expect(data.text).to.be("");
            expect(data.exerciseType).to.be.a('number');
            expect(data.exerciseType).to.be(0);
            expect(data.solution).to.be.a('string');
            expect(data.solution).to.be("");
            expect(data.state).to.be.a('number');
            expect(data.state).to.be(0);
            expect(data.subExercises).to.be.a('string');
            expect(data.subExercises).to.be("");
            {
              let dataCtr = data.choices;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SnippetsApi.ExerciseChoice);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.text).to.be.a('string');
                expect(data.text).to.be("");
                expect(data.score).to.be.a('string');
                expect(data.score).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coursesExercisesSubExercisesRead', function() {
        it('should call coursesExercisesSubExercisesRead successfully', function(done) {
          // TODO: uncomment, update parameter values for coursesExercisesSubExercisesRead call and complete the assertions
          /*
          var coursePk = "coursePk_example";
          var exercisePk = "exercisePk_example";
          var id = 56;

          instance.coursesExercisesSubExercisesRead(coursePk, exercisePk, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SnippetsApi.Exercise);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.text).to.be.a('string');
            expect(data.text).to.be("");
            expect(data.exerciseType).to.be.a('number');
            expect(data.exerciseType).to.be(0);
            expect(data.solution).to.be.a('string');
            expect(data.solution).to.be("");
            expect(data.state).to.be.a('number');
            expect(data.state).to.be(0);
            expect(data.subExercises).to.be.a('string');
            expect(data.subExercises).to.be("");
            {
              let dataCtr = data.choices;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SnippetsApi.ExerciseChoice);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.text).to.be.a('string');
                expect(data.text).to.be("");
                expect(data.score).to.be.a('string');
                expect(data.score).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coursesExercisesSubExercisesUpdate', function() {
        it('should call coursesExercisesSubExercisesUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for coursesExercisesSubExercisesUpdate call and complete the assertions
          /*
          var coursePk = "coursePk_example";
          var exercisePk = "exercisePk_example";
          var id = 56;
          var data = new SnippetsApi.Exercise();
          data.text = "";
          data.exerciseType = 0;
          data.solution = "";
          data.state = 0;
          data.subExercises = "";
          data.choices = [new SnippetsApi.ExerciseChoice()];
          data.choices[0].text = "";
          data.choices[0].score = "";

          instance.coursesExercisesSubExercisesUpdate(coursePk, exercisePk, id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SnippetsApi.Exercise);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.text).to.be.a('string');
            expect(data.text).to.be("");
            expect(data.exerciseType).to.be.a('number');
            expect(data.exerciseType).to.be(0);
            expect(data.solution).to.be.a('string');
            expect(data.solution).to.be("");
            expect(data.state).to.be.a('number');
            expect(data.state).to.be(0);
            expect(data.subExercises).to.be.a('string');
            expect(data.subExercises).to.be("");
            {
              let dataCtr = data.choices;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SnippetsApi.ExerciseChoice);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.text).to.be.a('string');
                expect(data.text).to.be("");
                expect(data.score).to.be.a('string');
                expect(data.score).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coursesExercisesUpdate', function() {
        it('should call coursesExercisesUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for coursesExercisesUpdate call and complete the assertions
          /*
          var coursePk = "coursePk_example";
          var id = 56;
          var data = new SnippetsApi.Exercise();
          data.text = "";
          data.exerciseType = 0;
          data.solution = "";
          data.state = 0;
          data.subExercises = "";
          data.choices = [new SnippetsApi.ExerciseChoice()];
          data.choices[0].text = "";
          data.choices[0].score = "";

          instance.coursesExercisesUpdate(coursePk, id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SnippetsApi.Exercise);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.text).to.be.a('string');
            expect(data.text).to.be("");
            expect(data.exerciseType).to.be.a('number');
            expect(data.exerciseType).to.be(0);
            expect(data.solution).to.be.a('string');
            expect(data.solution).to.be("");
            expect(data.state).to.be.a('number');
            expect(data.state).to.be(0);
            expect(data.subExercises).to.be.a('string');
            expect(data.subExercises).to.be("");
            {
              let dataCtr = data.choices;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SnippetsApi.ExerciseChoice);
                expect(data.id).to.be.a('number');
                expect(data.id).to.be(0);
                expect(data.text).to.be.a('string');
                expect(data.text).to.be("");
                expect(data.score).to.be.a('string');
                expect(data.score).to.be("");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coursesList', function() {
        it('should call coursesList successfully', function(done) {
          // TODO: uncomment coursesList call and complete the assertions
          /*

          instance.coursesList(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SnippetsApi.Course);
              expect(data.id).to.be.a('number');
              expect(data.id).to.be(0);
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.creator).to.be.a('number');
              expect(data.creator).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coursesPartialUpdate', function() {
        it('should call coursesPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for coursesPartialUpdate call and complete the assertions
          /*
          var id = 56;
          var data = new SnippetsApi.Course();
          data.name = "";
          data.description = "";

          instance.coursesPartialUpdate(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SnippetsApi.Course);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.creator).to.be.a('number');
            expect(data.creator).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coursesRead', function() {
        it('should call coursesRead successfully', function(done) {
          // TODO: uncomment, update parameter values for coursesRead call and complete the assertions
          /*
          var id = 56;

          instance.coursesRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SnippetsApi.Course);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.creator).to.be.a('number');
            expect(data.creator).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coursesTemplatesCreate', function() {
        it('should call coursesTemplatesCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for coursesTemplatesCreate call and complete the assertions
          /*
          var coursePk = "coursePk_example";
          var data = new SnippetsApi.EventTemplate();
          data.name = "";
          data.rules = [new SnippetsApi.EventTemplateRule()];
          data.rules[0].ruleType = 0;
          data.rules[0].targetSlotNumber = 0;
          data.rules[0].exercises = [0];
          data.rules[0].clauses = [new SnippetsApi.EventTemplateRuleClause()];
          data.rules[0].clauses[0].tags = [0];

          instance.coursesTemplatesCreate(coursePk, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SnippetsApi.EventTemplate);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            {
              let dataCtr = data.rules;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SnippetsApi.EventTemplateRule);
                expect(data.ruleType).to.be.a('number');
                expect(data.ruleType).to.be(0);
                expect(data.targetSlotNumber).to.be.a('number');
                expect(data.targetSlotNumber).to.be(0);
                {
                  let dataCtr = data.exercises;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('number');
                    expect(data).to.be(0);
                  }
                }
                {
                  let dataCtr = data.clauses;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(SnippetsApi.EventTemplateRuleClause);
                    {
                      let dataCtr = data.tags;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('number');
                        expect(data).to.be(0);
                      }
                    }
    
                          }
                }

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coursesTemplatesDelete', function() {
        it('should call coursesTemplatesDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for coursesTemplatesDelete call
          /*
          var coursePk = "coursePk_example";
          var id = 56;

          instance.coursesTemplatesDelete(coursePk, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coursesTemplatesList', function() {
        it('should call coursesTemplatesList successfully', function(done) {
          // TODO: uncomment, update parameter values for coursesTemplatesList call and complete the assertions
          /*
          var coursePk = "coursePk_example";

          instance.coursesTemplatesList(coursePk, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SnippetsApi.EventTemplate);
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              {
                let dataCtr = data.rules;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(SnippetsApi.EventTemplateRule);
                  expect(data.ruleType).to.be.a('number');
                  expect(data.ruleType).to.be(0);
                  expect(data.targetSlotNumber).to.be.a('number');
                  expect(data.targetSlotNumber).to.be(0);
                  {
                    let dataCtr = data.exercises;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a('number');
                      expect(data).to.be(0);
                    }
                  }
                  {
                    let dataCtr = data.clauses;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(SnippetsApi.EventTemplateRuleClause);
                      {
                        let dataCtr = data.tags;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a('number');
                          expect(data).to.be(0);
                        }
                      }
      
                            }
                  }
  
                        }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coursesTemplatesPartialUpdate', function() {
        it('should call coursesTemplatesPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for coursesTemplatesPartialUpdate call and complete the assertions
          /*
          var coursePk = "coursePk_example";
          var id = 56;
          var data = new SnippetsApi.EventTemplate();
          data.name = "";
          data.rules = [new SnippetsApi.EventTemplateRule()];
          data.rules[0].ruleType = 0;
          data.rules[0].targetSlotNumber = 0;
          data.rules[0].exercises = [0];
          data.rules[0].clauses = [new SnippetsApi.EventTemplateRuleClause()];
          data.rules[0].clauses[0].tags = [0];

          instance.coursesTemplatesPartialUpdate(coursePk, id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SnippetsApi.EventTemplate);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            {
              let dataCtr = data.rules;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SnippetsApi.EventTemplateRule);
                expect(data.ruleType).to.be.a('number');
                expect(data.ruleType).to.be(0);
                expect(data.targetSlotNumber).to.be.a('number');
                expect(data.targetSlotNumber).to.be(0);
                {
                  let dataCtr = data.exercises;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('number');
                    expect(data).to.be(0);
                  }
                }
                {
                  let dataCtr = data.clauses;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(SnippetsApi.EventTemplateRuleClause);
                    {
                      let dataCtr = data.tags;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('number');
                        expect(data).to.be(0);
                      }
                    }
    
                          }
                }

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coursesTemplatesRead', function() {
        it('should call coursesTemplatesRead successfully', function(done) {
          // TODO: uncomment, update parameter values for coursesTemplatesRead call and complete the assertions
          /*
          var coursePk = "coursePk_example";
          var id = 56;

          instance.coursesTemplatesRead(coursePk, id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SnippetsApi.EventTemplate);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            {
              let dataCtr = data.rules;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SnippetsApi.EventTemplateRule);
                expect(data.ruleType).to.be.a('number');
                expect(data.ruleType).to.be(0);
                expect(data.targetSlotNumber).to.be.a('number');
                expect(data.targetSlotNumber).to.be(0);
                {
                  let dataCtr = data.exercises;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('number');
                    expect(data).to.be(0);
                  }
                }
                {
                  let dataCtr = data.clauses;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(SnippetsApi.EventTemplateRuleClause);
                    {
                      let dataCtr = data.tags;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('number');
                        expect(data).to.be(0);
                      }
                    }
    
                          }
                }

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coursesTemplatesUpdate', function() {
        it('should call coursesTemplatesUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for coursesTemplatesUpdate call and complete the assertions
          /*
          var coursePk = "coursePk_example";
          var id = 56;
          var data = new SnippetsApi.EventTemplate();
          data.name = "";
          data.rules = [new SnippetsApi.EventTemplateRule()];
          data.rules[0].ruleType = 0;
          data.rules[0].targetSlotNumber = 0;
          data.rules[0].exercises = [0];
          data.rules[0].clauses = [new SnippetsApi.EventTemplateRuleClause()];
          data.rules[0].clauses[0].tags = [0];

          instance.coursesTemplatesUpdate(coursePk, id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SnippetsApi.EventTemplate);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            {
              let dataCtr = data.rules;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(SnippetsApi.EventTemplateRule);
                expect(data.ruleType).to.be.a('number');
                expect(data.ruleType).to.be(0);
                expect(data.targetSlotNumber).to.be.a('number');
                expect(data.targetSlotNumber).to.be(0);
                {
                  let dataCtr = data.exercises;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('number');
                    expect(data).to.be(0);
                  }
                }
                {
                  let dataCtr = data.clauses;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(SnippetsApi.EventTemplateRuleClause);
                    {
                      let dataCtr = data.tags;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('number');
                        expect(data).to.be(0);
                      }
                    }
    
                          }
                }

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coursesUpdate', function() {
        it('should call coursesUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for coursesUpdate call and complete the assertions
          /*
          var id = 56;
          var data = new SnippetsApi.Course();
          data.name = "";
          data.description = "";

          instance.coursesUpdate(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SnippetsApi.Course);
            expect(data.id).to.be.a('number');
            expect(data.id).to.be(0);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.creator).to.be.a('number');
            expect(data.creator).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
