/*
 * Snippets API
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.23
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SnippetsApi);
  }
}(this, function(expect, SnippetsApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Event', function() {
      beforeEach(function() {
        instance = new SnippetsApi.Event();
      });

      it('should create an instance of Event', function() {
        // TODO: update the code to test Event
        expect(instance).to.be.a(SnippetsApi.Event);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property instructions (base name: "instructions")', function() {
        // TODO: update the code to test the property instructions
        expect(instance).to.have.property('instructions');
        // expect(instance.instructions).to.be(expectedValueLiteral);
      });

      it('should have the property beginTimestamp (base name: "begin_timestamp")', function() {
        // TODO: update the code to test the property beginTimestamp
        expect(instance).to.have.property('beginTimestamp');
        // expect(instance.beginTimestamp).to.be(expectedValueLiteral);
      });

      it('should have the property endTimestamp (base name: "end_timestamp")', function() {
        // TODO: update the code to test the property endTimestamp
        expect(instance).to.have.property('endTimestamp');
        // expect(instance.endTimestamp).to.be(expectedValueLiteral);
      });

      it('should have the property eventType (base name: "event_type")', function() {
        // TODO: update the code to test the property eventType
        expect(instance).to.have.property('eventType');
        // expect(instance.eventType).to.be(expectedValueLiteral);
      });

      it('should have the property progressionRule (base name: "progression_rule")', function() {
        // TODO: update the code to test the property progressionRule
        expect(instance).to.have.property('progressionRule');
        // expect(instance.progressionRule).to.be(expectedValueLiteral);
      });

      it('should have the property state (base name: "state")', function() {
        // TODO: update the code to test the property state
        expect(instance).to.have.property('state');
        // expect(instance.state).to.be(expectedValueLiteral);
      });

    });
  });

}));
