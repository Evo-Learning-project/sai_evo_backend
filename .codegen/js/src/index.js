/*
 * Snippets API
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.23
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Course', 'model/Event', 'model/EventTemplate', 'model/EventTemplateRule', 'model/EventTemplateRuleClause', 'model/Exercise', 'model/ExerciseChoice', 'api/CoursesApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/Course'), require('./model/Event'), require('./model/EventTemplate'), require('./model/EventTemplateRule'), require('./model/EventTemplateRuleClause'), require('./model/Exercise'), require('./model/ExerciseChoice'), require('./api/CoursesApi'));
  }
}(function(ApiClient, Course, Event, EventTemplate, EventTemplateRule, EventTemplateRuleClause, Exercise, ExerciseChoice, CoursesApi) {
  'use strict';

  /**
   * Test_description.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var SnippetsApi = require('index'); // See note below*.
   * var xxxSvc = new SnippetsApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new SnippetsApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new SnippetsApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new SnippetsApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version v1
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The Course model constructor.
     * @property {module:model/Course}
     */
    Course: Course,
    /**
     * The Event model constructor.
     * @property {module:model/Event}
     */
    Event: Event,
    /**
     * The EventTemplate model constructor.
     * @property {module:model/EventTemplate}
     */
    EventTemplate: EventTemplate,
    /**
     * The EventTemplateRule model constructor.
     * @property {module:model/EventTemplateRule}
     */
    EventTemplateRule: EventTemplateRule,
    /**
     * The EventTemplateRuleClause model constructor.
     * @property {module:model/EventTemplateRuleClause}
     */
    EventTemplateRuleClause: EventTemplateRuleClause,
    /**
     * The Exercise model constructor.
     * @property {module:model/Exercise}
     */
    Exercise: Exercise,
    /**
     * The ExerciseChoice model constructor.
     * @property {module:model/ExerciseChoice}
     */
    ExerciseChoice: ExerciseChoice,
    /**
     * The CoursesApi service constructor.
     * @property {module:api/CoursesApi}
     */
    CoursesApi: CoursesApi
  };

  return exports;
}));
