/*
 * Snippets API
 * Test description
 *
 * OpenAPI spec version: v1
 * Contact: contact@snippets.local
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.23
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Course', 'model/Event', 'model/EventTemplate', 'model/Exercise', 'model/ExerciseChoice'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Course'), require('../model/Event'), require('../model/EventTemplate'), require('../model/Exercise'), require('../model/ExerciseChoice'));
  } else {
    // Browser globals (root is window)
    if (!root.SnippetsApi) {
      root.SnippetsApi = {};
    }
    root.SnippetsApi.CoursesApi = factory(root.SnippetsApi.ApiClient, root.SnippetsApi.Course, root.SnippetsApi.Event, root.SnippetsApi.EventTemplate, root.SnippetsApi.Exercise, root.SnippetsApi.ExerciseChoice);
  }
}(this, function(ApiClient, Course, Event, EventTemplate, Exercise, ExerciseChoice) {
  'use strict';

  /**
   * Courses service.
   * @module api/CoursesApi
   * @version v1
   */

  /**
   * Constructs a new CoursesApi. 
   * @alias module:api/CoursesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the coursesCreate operation.
     * @callback module:api/CoursesApi~coursesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Course} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/Course} data 
     * @param {module:api/CoursesApi~coursesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Course}
     */
    this.coursesCreate = function(data, callback) {
      var postBody = data;

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling coursesCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Course;

      return this.apiClient.callApi(
        '/courses/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesDelete operation.
     * @callback module:api/CoursesApi~coursesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this course.
     * @param {module:api/CoursesApi~coursesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.coursesDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling coursesDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/courses/{id}/', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesEventsCreate operation.
     * @callback module:api/CoursesApi~coursesEventsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Event} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} coursePk 
     * @param {module:model/Event} data 
     * @param {module:api/CoursesApi~coursesEventsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Event}
     */
    this.coursesEventsCreate = function(coursePk, data, callback) {
      var postBody = data;

      // verify the required parameter 'coursePk' is set
      if (coursePk === undefined || coursePk === null) {
        throw new Error("Missing the required parameter 'coursePk' when calling coursesEventsCreate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling coursesEventsCreate");
      }


      var pathParams = {
        'course_pk': coursePk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Event;

      return this.apiClient.callApi(
        '/courses/{course_pk}/events/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesEventsDelete operation.
     * @callback module:api/CoursesApi~coursesEventsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} coursePk 
     * @param {Number} id A unique integer value identifying this event.
     * @param {module:api/CoursesApi~coursesEventsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.coursesEventsDelete = function(coursePk, id, callback) {
      var postBody = null;

      // verify the required parameter 'coursePk' is set
      if (coursePk === undefined || coursePk === null) {
        throw new Error("Missing the required parameter 'coursePk' when calling coursesEventsDelete");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling coursesEventsDelete");
      }


      var pathParams = {
        'course_pk': coursePk,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/courses/{course_pk}/events/{id}/', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesEventsList operation.
     * @callback module:api/CoursesApi~coursesEventsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Event>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} coursePk 
     * @param {module:api/CoursesApi~coursesEventsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Event>}
     */
    this.coursesEventsList = function(coursePk, callback) {
      var postBody = null;

      // verify the required parameter 'coursePk' is set
      if (coursePk === undefined || coursePk === null) {
        throw new Error("Missing the required parameter 'coursePk' when calling coursesEventsList");
      }


      var pathParams = {
        'course_pk': coursePk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Event];

      return this.apiClient.callApi(
        '/courses/{course_pk}/events/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesEventsPartialUpdate operation.
     * @callback module:api/CoursesApi~coursesEventsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Event} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} coursePk 
     * @param {Number} id A unique integer value identifying this event.
     * @param {module:model/Event} data 
     * @param {module:api/CoursesApi~coursesEventsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Event}
     */
    this.coursesEventsPartialUpdate = function(coursePk, id, data, callback) {
      var postBody = data;

      // verify the required parameter 'coursePk' is set
      if (coursePk === undefined || coursePk === null) {
        throw new Error("Missing the required parameter 'coursePk' when calling coursesEventsPartialUpdate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling coursesEventsPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling coursesEventsPartialUpdate");
      }


      var pathParams = {
        'course_pk': coursePk,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Event;

      return this.apiClient.callApi(
        '/courses/{course_pk}/events/{id}/', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesEventsParticipationsCreate operation.
     * @callback module:api/CoursesApi~coursesEventsParticipationsCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} coursePk 
     * @param {String} eventPk 
     * @param {module:api/CoursesApi~coursesEventsParticipationsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.coursesEventsParticipationsCreate = function(coursePk, eventPk, callback) {
      var postBody = null;

      // verify the required parameter 'coursePk' is set
      if (coursePk === undefined || coursePk === null) {
        throw new Error("Missing the required parameter 'coursePk' when calling coursesEventsParticipationsCreate");
      }

      // verify the required parameter 'eventPk' is set
      if (eventPk === undefined || eventPk === null) {
        throw new Error("Missing the required parameter 'eventPk' when calling coursesEventsParticipationsCreate");
      }


      var pathParams = {
        'course_pk': coursePk,
        'event_pk': eventPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/courses/{course_pk}/events/{event_pk}/participations/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesEventsParticipationsList operation.
     * @callback module:api/CoursesApi~coursesEventsParticipationsListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} coursePk 
     * @param {String} eventPk 
     * @param {module:api/CoursesApi~coursesEventsParticipationsListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.coursesEventsParticipationsList = function(coursePk, eventPk, callback) {
      var postBody = null;

      // verify the required parameter 'coursePk' is set
      if (coursePk === undefined || coursePk === null) {
        throw new Error("Missing the required parameter 'coursePk' when calling coursesEventsParticipationsList");
      }

      // verify the required parameter 'eventPk' is set
      if (eventPk === undefined || eventPk === null) {
        throw new Error("Missing the required parameter 'eventPk' when calling coursesEventsParticipationsList");
      }


      var pathParams = {
        'course_pk': coursePk,
        'event_pk': eventPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/courses/{course_pk}/events/{event_pk}/participations/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesEventsParticipationsPartialUpdate operation.
     * @callback module:api/CoursesApi~coursesEventsParticipationsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} coursePk 
     * @param {String} eventPk 
     * @param {Number} id A unique integer value identifying this event participation.
     * @param {module:api/CoursesApi~coursesEventsParticipationsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.coursesEventsParticipationsPartialUpdate = function(coursePk, eventPk, id, callback) {
      var postBody = null;

      // verify the required parameter 'coursePk' is set
      if (coursePk === undefined || coursePk === null) {
        throw new Error("Missing the required parameter 'coursePk' when calling coursesEventsParticipationsPartialUpdate");
      }

      // verify the required parameter 'eventPk' is set
      if (eventPk === undefined || eventPk === null) {
        throw new Error("Missing the required parameter 'eventPk' when calling coursesEventsParticipationsPartialUpdate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling coursesEventsParticipationsPartialUpdate");
      }


      var pathParams = {
        'course_pk': coursePk,
        'event_pk': eventPk,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/courses/{course_pk}/events/{event_pk}/participations/{id}/', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesEventsParticipationsRead operation.
     * @callback module:api/CoursesApi~coursesEventsParticipationsReadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} coursePk 
     * @param {String} eventPk 
     * @param {Number} id A unique integer value identifying this event participation.
     * @param {module:api/CoursesApi~coursesEventsParticipationsReadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.coursesEventsParticipationsRead = function(coursePk, eventPk, id, callback) {
      var postBody = null;

      // verify the required parameter 'coursePk' is set
      if (coursePk === undefined || coursePk === null) {
        throw new Error("Missing the required parameter 'coursePk' when calling coursesEventsParticipationsRead");
      }

      // verify the required parameter 'eventPk' is set
      if (eventPk === undefined || eventPk === null) {
        throw new Error("Missing the required parameter 'eventPk' when calling coursesEventsParticipationsRead");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling coursesEventsParticipationsRead");
      }


      var pathParams = {
        'course_pk': coursePk,
        'event_pk': eventPk,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/courses/{course_pk}/events/{event_pk}/participations/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesEventsParticipationsSlotsList operation.
     * @callback module:api/CoursesApi~coursesEventsParticipationsSlotsListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} coursePk 
     * @param {String} eventPk 
     * @param {String} participationPk 
     * @param {module:api/CoursesApi~coursesEventsParticipationsSlotsListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.coursesEventsParticipationsSlotsList = function(coursePk, eventPk, participationPk, callback) {
      var postBody = null;

      // verify the required parameter 'coursePk' is set
      if (coursePk === undefined || coursePk === null) {
        throw new Error("Missing the required parameter 'coursePk' when calling coursesEventsParticipationsSlotsList");
      }

      // verify the required parameter 'eventPk' is set
      if (eventPk === undefined || eventPk === null) {
        throw new Error("Missing the required parameter 'eventPk' when calling coursesEventsParticipationsSlotsList");
      }

      // verify the required parameter 'participationPk' is set
      if (participationPk === undefined || participationPk === null) {
        throw new Error("Missing the required parameter 'participationPk' when calling coursesEventsParticipationsSlotsList");
      }


      var pathParams = {
        'course_pk': coursePk,
        'event_pk': eventPk,
        'participation_pk': participationPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/courses/{course_pk}/events/{event_pk}/participations/{participation_pk}/slots/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesEventsParticipationsSlotsPartialUpdate operation.
     * @callback module:api/CoursesApi~coursesEventsParticipationsSlotsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} coursePk 
     * @param {String} eventPk 
     * @param {String} id 
     * @param {String} participationPk 
     * @param {module:api/CoursesApi~coursesEventsParticipationsSlotsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.coursesEventsParticipationsSlotsPartialUpdate = function(coursePk, eventPk, id, participationPk, callback) {
      var postBody = null;

      // verify the required parameter 'coursePk' is set
      if (coursePk === undefined || coursePk === null) {
        throw new Error("Missing the required parameter 'coursePk' when calling coursesEventsParticipationsSlotsPartialUpdate");
      }

      // verify the required parameter 'eventPk' is set
      if (eventPk === undefined || eventPk === null) {
        throw new Error("Missing the required parameter 'eventPk' when calling coursesEventsParticipationsSlotsPartialUpdate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling coursesEventsParticipationsSlotsPartialUpdate");
      }

      // verify the required parameter 'participationPk' is set
      if (participationPk === undefined || participationPk === null) {
        throw new Error("Missing the required parameter 'participationPk' when calling coursesEventsParticipationsSlotsPartialUpdate");
      }


      var pathParams = {
        'course_pk': coursePk,
        'event_pk': eventPk,
        'id': id,
        'participation_pk': participationPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/courses/{course_pk}/events/{event_pk}/participations/{participation_pk}/slots/{id}/', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesEventsParticipationsSlotsRead operation.
     * @callback module:api/CoursesApi~coursesEventsParticipationsSlotsReadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} coursePk 
     * @param {String} eventPk 
     * @param {String} id 
     * @param {String} participationPk 
     * @param {module:api/CoursesApi~coursesEventsParticipationsSlotsReadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.coursesEventsParticipationsSlotsRead = function(coursePk, eventPk, id, participationPk, callback) {
      var postBody = null;

      // verify the required parameter 'coursePk' is set
      if (coursePk === undefined || coursePk === null) {
        throw new Error("Missing the required parameter 'coursePk' when calling coursesEventsParticipationsSlotsRead");
      }

      // verify the required parameter 'eventPk' is set
      if (eventPk === undefined || eventPk === null) {
        throw new Error("Missing the required parameter 'eventPk' when calling coursesEventsParticipationsSlotsRead");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling coursesEventsParticipationsSlotsRead");
      }

      // verify the required parameter 'participationPk' is set
      if (participationPk === undefined || participationPk === null) {
        throw new Error("Missing the required parameter 'participationPk' when calling coursesEventsParticipationsSlotsRead");
      }


      var pathParams = {
        'course_pk': coursePk,
        'event_pk': eventPk,
        'id': id,
        'participation_pk': participationPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/courses/{course_pk}/events/{event_pk}/participations/{participation_pk}/slots/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesEventsParticipationsSlotsUpdate operation.
     * @callback module:api/CoursesApi~coursesEventsParticipationsSlotsUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} coursePk 
     * @param {String} eventPk 
     * @param {String} id 
     * @param {String} participationPk 
     * @param {module:api/CoursesApi~coursesEventsParticipationsSlotsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.coursesEventsParticipationsSlotsUpdate = function(coursePk, eventPk, id, participationPk, callback) {
      var postBody = null;

      // verify the required parameter 'coursePk' is set
      if (coursePk === undefined || coursePk === null) {
        throw new Error("Missing the required parameter 'coursePk' when calling coursesEventsParticipationsSlotsUpdate");
      }

      // verify the required parameter 'eventPk' is set
      if (eventPk === undefined || eventPk === null) {
        throw new Error("Missing the required parameter 'eventPk' when calling coursesEventsParticipationsSlotsUpdate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling coursesEventsParticipationsSlotsUpdate");
      }

      // verify the required parameter 'participationPk' is set
      if (participationPk === undefined || participationPk === null) {
        throw new Error("Missing the required parameter 'participationPk' when calling coursesEventsParticipationsSlotsUpdate");
      }


      var pathParams = {
        'course_pk': coursePk,
        'event_pk': eventPk,
        'id': id,
        'participation_pk': participationPk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/courses/{course_pk}/events/{event_pk}/participations/{participation_pk}/slots/{id}/', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesEventsParticipationsUpdate operation.
     * @callback module:api/CoursesApi~coursesEventsParticipationsUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} coursePk 
     * @param {String} eventPk 
     * @param {Number} id A unique integer value identifying this event participation.
     * @param {module:api/CoursesApi~coursesEventsParticipationsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.coursesEventsParticipationsUpdate = function(coursePk, eventPk, id, callback) {
      var postBody = null;

      // verify the required parameter 'coursePk' is set
      if (coursePk === undefined || coursePk === null) {
        throw new Error("Missing the required parameter 'coursePk' when calling coursesEventsParticipationsUpdate");
      }

      // verify the required parameter 'eventPk' is set
      if (eventPk === undefined || eventPk === null) {
        throw new Error("Missing the required parameter 'eventPk' when calling coursesEventsParticipationsUpdate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling coursesEventsParticipationsUpdate");
      }


      var pathParams = {
        'course_pk': coursePk,
        'event_pk': eventPk,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/courses/{course_pk}/events/{event_pk}/participations/{id}/', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesEventsRead operation.
     * @callback module:api/CoursesApi~coursesEventsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Event} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} coursePk 
     * @param {Number} id A unique integer value identifying this event.
     * @param {module:api/CoursesApi~coursesEventsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Event}
     */
    this.coursesEventsRead = function(coursePk, id, callback) {
      var postBody = null;

      // verify the required parameter 'coursePk' is set
      if (coursePk === undefined || coursePk === null) {
        throw new Error("Missing the required parameter 'coursePk' when calling coursesEventsRead");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling coursesEventsRead");
      }


      var pathParams = {
        'course_pk': coursePk,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Event;

      return this.apiClient.callApi(
        '/courses/{course_pk}/events/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesEventsUpdate operation.
     * @callback module:api/CoursesApi~coursesEventsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Event} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} coursePk 
     * @param {Number} id A unique integer value identifying this event.
     * @param {module:model/Event} data 
     * @param {module:api/CoursesApi~coursesEventsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Event}
     */
    this.coursesEventsUpdate = function(coursePk, id, data, callback) {
      var postBody = data;

      // verify the required parameter 'coursePk' is set
      if (coursePk === undefined || coursePk === null) {
        throw new Error("Missing the required parameter 'coursePk' when calling coursesEventsUpdate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling coursesEventsUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling coursesEventsUpdate");
      }


      var pathParams = {
        'course_pk': coursePk,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Event;

      return this.apiClient.callApi(
        '/courses/{course_pk}/events/{id}/', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesExercisesChoicesCreate operation.
     * @callback module:api/CoursesApi~coursesExercisesChoicesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExerciseChoice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} coursePk 
     * @param {String} exercisePk 
     * @param {module:model/ExerciseChoice} data 
     * @param {module:api/CoursesApi~coursesExercisesChoicesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExerciseChoice}
     */
    this.coursesExercisesChoicesCreate = function(coursePk, exercisePk, data, callback) {
      var postBody = data;

      // verify the required parameter 'coursePk' is set
      if (coursePk === undefined || coursePk === null) {
        throw new Error("Missing the required parameter 'coursePk' when calling coursesExercisesChoicesCreate");
      }

      // verify the required parameter 'exercisePk' is set
      if (exercisePk === undefined || exercisePk === null) {
        throw new Error("Missing the required parameter 'exercisePk' when calling coursesExercisesChoicesCreate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling coursesExercisesChoicesCreate");
      }


      var pathParams = {
        'course_pk': coursePk,
        'exercise_pk': exercisePk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ExerciseChoice;

      return this.apiClient.callApi(
        '/courses/{course_pk}/exercises/{exercise_pk}/choices/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesExercisesChoicesDelete operation.
     * @callback module:api/CoursesApi~coursesExercisesChoicesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} coursePk 
     * @param {String} exercisePk 
     * @param {Number} id A unique integer value identifying this exercise choice.
     * @param {module:api/CoursesApi~coursesExercisesChoicesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.coursesExercisesChoicesDelete = function(coursePk, exercisePk, id, callback) {
      var postBody = null;

      // verify the required parameter 'coursePk' is set
      if (coursePk === undefined || coursePk === null) {
        throw new Error("Missing the required parameter 'coursePk' when calling coursesExercisesChoicesDelete");
      }

      // verify the required parameter 'exercisePk' is set
      if (exercisePk === undefined || exercisePk === null) {
        throw new Error("Missing the required parameter 'exercisePk' when calling coursesExercisesChoicesDelete");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling coursesExercisesChoicesDelete");
      }


      var pathParams = {
        'course_pk': coursePk,
        'exercise_pk': exercisePk,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/courses/{course_pk}/exercises/{exercise_pk}/choices/{id}/', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesExercisesChoicesList operation.
     * @callback module:api/CoursesApi~coursesExercisesChoicesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ExerciseChoice>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} coursePk 
     * @param {String} exercisePk 
     * @param {module:api/CoursesApi~coursesExercisesChoicesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ExerciseChoice>}
     */
    this.coursesExercisesChoicesList = function(coursePk, exercisePk, callback) {
      var postBody = null;

      // verify the required parameter 'coursePk' is set
      if (coursePk === undefined || coursePk === null) {
        throw new Error("Missing the required parameter 'coursePk' when calling coursesExercisesChoicesList");
      }

      // verify the required parameter 'exercisePk' is set
      if (exercisePk === undefined || exercisePk === null) {
        throw new Error("Missing the required parameter 'exercisePk' when calling coursesExercisesChoicesList");
      }


      var pathParams = {
        'course_pk': coursePk,
        'exercise_pk': exercisePk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [ExerciseChoice];

      return this.apiClient.callApi(
        '/courses/{course_pk}/exercises/{exercise_pk}/choices/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesExercisesChoicesPartialUpdate operation.
     * @callback module:api/CoursesApi~coursesExercisesChoicesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExerciseChoice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} coursePk 
     * @param {String} exercisePk 
     * @param {Number} id A unique integer value identifying this exercise choice.
     * @param {module:model/ExerciseChoice} data 
     * @param {module:api/CoursesApi~coursesExercisesChoicesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExerciseChoice}
     */
    this.coursesExercisesChoicesPartialUpdate = function(coursePk, exercisePk, id, data, callback) {
      var postBody = data;

      // verify the required parameter 'coursePk' is set
      if (coursePk === undefined || coursePk === null) {
        throw new Error("Missing the required parameter 'coursePk' when calling coursesExercisesChoicesPartialUpdate");
      }

      // verify the required parameter 'exercisePk' is set
      if (exercisePk === undefined || exercisePk === null) {
        throw new Error("Missing the required parameter 'exercisePk' when calling coursesExercisesChoicesPartialUpdate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling coursesExercisesChoicesPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling coursesExercisesChoicesPartialUpdate");
      }


      var pathParams = {
        'course_pk': coursePk,
        'exercise_pk': exercisePk,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ExerciseChoice;

      return this.apiClient.callApi(
        '/courses/{course_pk}/exercises/{exercise_pk}/choices/{id}/', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesExercisesChoicesRead operation.
     * @callback module:api/CoursesApi~coursesExercisesChoicesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExerciseChoice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} coursePk 
     * @param {String} exercisePk 
     * @param {Number} id A unique integer value identifying this exercise choice.
     * @param {module:api/CoursesApi~coursesExercisesChoicesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExerciseChoice}
     */
    this.coursesExercisesChoicesRead = function(coursePk, exercisePk, id, callback) {
      var postBody = null;

      // verify the required parameter 'coursePk' is set
      if (coursePk === undefined || coursePk === null) {
        throw new Error("Missing the required parameter 'coursePk' when calling coursesExercisesChoicesRead");
      }

      // verify the required parameter 'exercisePk' is set
      if (exercisePk === undefined || exercisePk === null) {
        throw new Error("Missing the required parameter 'exercisePk' when calling coursesExercisesChoicesRead");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling coursesExercisesChoicesRead");
      }


      var pathParams = {
        'course_pk': coursePk,
        'exercise_pk': exercisePk,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ExerciseChoice;

      return this.apiClient.callApi(
        '/courses/{course_pk}/exercises/{exercise_pk}/choices/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesExercisesChoicesUpdate operation.
     * @callback module:api/CoursesApi~coursesExercisesChoicesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExerciseChoice} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} coursePk 
     * @param {String} exercisePk 
     * @param {Number} id A unique integer value identifying this exercise choice.
     * @param {module:model/ExerciseChoice} data 
     * @param {module:api/CoursesApi~coursesExercisesChoicesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExerciseChoice}
     */
    this.coursesExercisesChoicesUpdate = function(coursePk, exercisePk, id, data, callback) {
      var postBody = data;

      // verify the required parameter 'coursePk' is set
      if (coursePk === undefined || coursePk === null) {
        throw new Error("Missing the required parameter 'coursePk' when calling coursesExercisesChoicesUpdate");
      }

      // verify the required parameter 'exercisePk' is set
      if (exercisePk === undefined || exercisePk === null) {
        throw new Error("Missing the required parameter 'exercisePk' when calling coursesExercisesChoicesUpdate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling coursesExercisesChoicesUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling coursesExercisesChoicesUpdate");
      }


      var pathParams = {
        'course_pk': coursePk,
        'exercise_pk': exercisePk,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ExerciseChoice;

      return this.apiClient.callApi(
        '/courses/{course_pk}/exercises/{exercise_pk}/choices/{id}/', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesExercisesCreate operation.
     * @callback module:api/CoursesApi~coursesExercisesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Exercise} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} coursePk 
     * @param {module:model/Exercise} data 
     * @param {module:api/CoursesApi~coursesExercisesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Exercise}
     */
    this.coursesExercisesCreate = function(coursePk, data, callback) {
      var postBody = data;

      // verify the required parameter 'coursePk' is set
      if (coursePk === undefined || coursePk === null) {
        throw new Error("Missing the required parameter 'coursePk' when calling coursesExercisesCreate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling coursesExercisesCreate");
      }


      var pathParams = {
        'course_pk': coursePk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Exercise;

      return this.apiClient.callApi(
        '/courses/{course_pk}/exercises/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesExercisesDelete operation.
     * @callback module:api/CoursesApi~coursesExercisesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} coursePk 
     * @param {Number} id A unique integer value identifying this exercise.
     * @param {module:api/CoursesApi~coursesExercisesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.coursesExercisesDelete = function(coursePk, id, callback) {
      var postBody = null;

      // verify the required parameter 'coursePk' is set
      if (coursePk === undefined || coursePk === null) {
        throw new Error("Missing the required parameter 'coursePk' when calling coursesExercisesDelete");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling coursesExercisesDelete");
      }


      var pathParams = {
        'course_pk': coursePk,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/courses/{course_pk}/exercises/{id}/', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesExercisesList operation.
     * @callback module:api/CoursesApi~coursesExercisesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Exercise>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} coursePk 
     * @param {module:api/CoursesApi~coursesExercisesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Exercise>}
     */
    this.coursesExercisesList = function(coursePk, callback) {
      var postBody = null;

      // verify the required parameter 'coursePk' is set
      if (coursePk === undefined || coursePk === null) {
        throw new Error("Missing the required parameter 'coursePk' when calling coursesExercisesList");
      }


      var pathParams = {
        'course_pk': coursePk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Exercise];

      return this.apiClient.callApi(
        '/courses/{course_pk}/exercises/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesExercisesPartialUpdate operation.
     * @callback module:api/CoursesApi~coursesExercisesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Exercise} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} coursePk 
     * @param {Number} id A unique integer value identifying this exercise.
     * @param {module:model/Exercise} data 
     * @param {module:api/CoursesApi~coursesExercisesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Exercise}
     */
    this.coursesExercisesPartialUpdate = function(coursePk, id, data, callback) {
      var postBody = data;

      // verify the required parameter 'coursePk' is set
      if (coursePk === undefined || coursePk === null) {
        throw new Error("Missing the required parameter 'coursePk' when calling coursesExercisesPartialUpdate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling coursesExercisesPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling coursesExercisesPartialUpdate");
      }


      var pathParams = {
        'course_pk': coursePk,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Exercise;

      return this.apiClient.callApi(
        '/courses/{course_pk}/exercises/{id}/', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesExercisesRead operation.
     * @callback module:api/CoursesApi~coursesExercisesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Exercise} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} coursePk 
     * @param {Number} id A unique integer value identifying this exercise.
     * @param {module:api/CoursesApi~coursesExercisesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Exercise}
     */
    this.coursesExercisesRead = function(coursePk, id, callback) {
      var postBody = null;

      // verify the required parameter 'coursePk' is set
      if (coursePk === undefined || coursePk === null) {
        throw new Error("Missing the required parameter 'coursePk' when calling coursesExercisesRead");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling coursesExercisesRead");
      }


      var pathParams = {
        'course_pk': coursePk,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Exercise;

      return this.apiClient.callApi(
        '/courses/{course_pk}/exercises/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesExercisesSubExercisesCreate operation.
     * @callback module:api/CoursesApi~coursesExercisesSubExercisesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Exercise} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} coursePk 
     * @param {String} exercisePk 
     * @param {module:model/Exercise} data 
     * @param {module:api/CoursesApi~coursesExercisesSubExercisesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Exercise}
     */
    this.coursesExercisesSubExercisesCreate = function(coursePk, exercisePk, data, callback) {
      var postBody = data;

      // verify the required parameter 'coursePk' is set
      if (coursePk === undefined || coursePk === null) {
        throw new Error("Missing the required parameter 'coursePk' when calling coursesExercisesSubExercisesCreate");
      }

      // verify the required parameter 'exercisePk' is set
      if (exercisePk === undefined || exercisePk === null) {
        throw new Error("Missing the required parameter 'exercisePk' when calling coursesExercisesSubExercisesCreate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling coursesExercisesSubExercisesCreate");
      }


      var pathParams = {
        'course_pk': coursePk,
        'exercise_pk': exercisePk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Exercise;

      return this.apiClient.callApi(
        '/courses/{course_pk}/exercises/{exercise_pk}/sub_exercises/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesExercisesSubExercisesDelete operation.
     * @callback module:api/CoursesApi~coursesExercisesSubExercisesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} coursePk 
     * @param {String} exercisePk 
     * @param {Number} id A unique integer value identifying this exercise.
     * @param {module:api/CoursesApi~coursesExercisesSubExercisesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.coursesExercisesSubExercisesDelete = function(coursePk, exercisePk, id, callback) {
      var postBody = null;

      // verify the required parameter 'coursePk' is set
      if (coursePk === undefined || coursePk === null) {
        throw new Error("Missing the required parameter 'coursePk' when calling coursesExercisesSubExercisesDelete");
      }

      // verify the required parameter 'exercisePk' is set
      if (exercisePk === undefined || exercisePk === null) {
        throw new Error("Missing the required parameter 'exercisePk' when calling coursesExercisesSubExercisesDelete");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling coursesExercisesSubExercisesDelete");
      }


      var pathParams = {
        'course_pk': coursePk,
        'exercise_pk': exercisePk,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/courses/{course_pk}/exercises/{exercise_pk}/sub_exercises/{id}/', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesExercisesSubExercisesList operation.
     * @callback module:api/CoursesApi~coursesExercisesSubExercisesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Exercise>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} coursePk 
     * @param {String} exercisePk 
     * @param {module:api/CoursesApi~coursesExercisesSubExercisesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Exercise>}
     */
    this.coursesExercisesSubExercisesList = function(coursePk, exercisePk, callback) {
      var postBody = null;

      // verify the required parameter 'coursePk' is set
      if (coursePk === undefined || coursePk === null) {
        throw new Error("Missing the required parameter 'coursePk' when calling coursesExercisesSubExercisesList");
      }

      // verify the required parameter 'exercisePk' is set
      if (exercisePk === undefined || exercisePk === null) {
        throw new Error("Missing the required parameter 'exercisePk' when calling coursesExercisesSubExercisesList");
      }


      var pathParams = {
        'course_pk': coursePk,
        'exercise_pk': exercisePk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Exercise];

      return this.apiClient.callApi(
        '/courses/{course_pk}/exercises/{exercise_pk}/sub_exercises/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesExercisesSubExercisesPartialUpdate operation.
     * @callback module:api/CoursesApi~coursesExercisesSubExercisesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Exercise} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} coursePk 
     * @param {String} exercisePk 
     * @param {Number} id A unique integer value identifying this exercise.
     * @param {module:model/Exercise} data 
     * @param {module:api/CoursesApi~coursesExercisesSubExercisesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Exercise}
     */
    this.coursesExercisesSubExercisesPartialUpdate = function(coursePk, exercisePk, id, data, callback) {
      var postBody = data;

      // verify the required parameter 'coursePk' is set
      if (coursePk === undefined || coursePk === null) {
        throw new Error("Missing the required parameter 'coursePk' when calling coursesExercisesSubExercisesPartialUpdate");
      }

      // verify the required parameter 'exercisePk' is set
      if (exercisePk === undefined || exercisePk === null) {
        throw new Error("Missing the required parameter 'exercisePk' when calling coursesExercisesSubExercisesPartialUpdate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling coursesExercisesSubExercisesPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling coursesExercisesSubExercisesPartialUpdate");
      }


      var pathParams = {
        'course_pk': coursePk,
        'exercise_pk': exercisePk,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Exercise;

      return this.apiClient.callApi(
        '/courses/{course_pk}/exercises/{exercise_pk}/sub_exercises/{id}/', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesExercisesSubExercisesRead operation.
     * @callback module:api/CoursesApi~coursesExercisesSubExercisesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Exercise} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} coursePk 
     * @param {String} exercisePk 
     * @param {Number} id A unique integer value identifying this exercise.
     * @param {module:api/CoursesApi~coursesExercisesSubExercisesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Exercise}
     */
    this.coursesExercisesSubExercisesRead = function(coursePk, exercisePk, id, callback) {
      var postBody = null;

      // verify the required parameter 'coursePk' is set
      if (coursePk === undefined || coursePk === null) {
        throw new Error("Missing the required parameter 'coursePk' when calling coursesExercisesSubExercisesRead");
      }

      // verify the required parameter 'exercisePk' is set
      if (exercisePk === undefined || exercisePk === null) {
        throw new Error("Missing the required parameter 'exercisePk' when calling coursesExercisesSubExercisesRead");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling coursesExercisesSubExercisesRead");
      }


      var pathParams = {
        'course_pk': coursePk,
        'exercise_pk': exercisePk,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Exercise;

      return this.apiClient.callApi(
        '/courses/{course_pk}/exercises/{exercise_pk}/sub_exercises/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesExercisesSubExercisesUpdate operation.
     * @callback module:api/CoursesApi~coursesExercisesSubExercisesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Exercise} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} coursePk 
     * @param {String} exercisePk 
     * @param {Number} id A unique integer value identifying this exercise.
     * @param {module:model/Exercise} data 
     * @param {module:api/CoursesApi~coursesExercisesSubExercisesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Exercise}
     */
    this.coursesExercisesSubExercisesUpdate = function(coursePk, exercisePk, id, data, callback) {
      var postBody = data;

      // verify the required parameter 'coursePk' is set
      if (coursePk === undefined || coursePk === null) {
        throw new Error("Missing the required parameter 'coursePk' when calling coursesExercisesSubExercisesUpdate");
      }

      // verify the required parameter 'exercisePk' is set
      if (exercisePk === undefined || exercisePk === null) {
        throw new Error("Missing the required parameter 'exercisePk' when calling coursesExercisesSubExercisesUpdate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling coursesExercisesSubExercisesUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling coursesExercisesSubExercisesUpdate");
      }


      var pathParams = {
        'course_pk': coursePk,
        'exercise_pk': exercisePk,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Exercise;

      return this.apiClient.callApi(
        '/courses/{course_pk}/exercises/{exercise_pk}/sub_exercises/{id}/', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesExercisesUpdate operation.
     * @callback module:api/CoursesApi~coursesExercisesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Exercise} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} coursePk 
     * @param {Number} id A unique integer value identifying this exercise.
     * @param {module:model/Exercise} data 
     * @param {module:api/CoursesApi~coursesExercisesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Exercise}
     */
    this.coursesExercisesUpdate = function(coursePk, id, data, callback) {
      var postBody = data;

      // verify the required parameter 'coursePk' is set
      if (coursePk === undefined || coursePk === null) {
        throw new Error("Missing the required parameter 'coursePk' when calling coursesExercisesUpdate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling coursesExercisesUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling coursesExercisesUpdate");
      }


      var pathParams = {
        'course_pk': coursePk,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Exercise;

      return this.apiClient.callApi(
        '/courses/{course_pk}/exercises/{id}/', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesList operation.
     * @callback module:api/CoursesApi~coursesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Course>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/CoursesApi~coursesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Course>}
     */
    this.coursesList = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Course];

      return this.apiClient.callApi(
        '/courses/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesPartialUpdate operation.
     * @callback module:api/CoursesApi~coursesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Course} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this course.
     * @param {module:model/Course} data 
     * @param {module:api/CoursesApi~coursesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Course}
     */
    this.coursesPartialUpdate = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling coursesPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling coursesPartialUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Course;

      return this.apiClient.callApi(
        '/courses/{id}/', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesRead operation.
     * @callback module:api/CoursesApi~coursesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Course} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this course.
     * @param {module:api/CoursesApi~coursesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Course}
     */
    this.coursesRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling coursesRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Course;

      return this.apiClient.callApi(
        '/courses/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesTemplatesCreate operation.
     * @callback module:api/CoursesApi~coursesTemplatesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} coursePk 
     * @param {module:model/EventTemplate} data 
     * @param {module:api/CoursesApi~coursesTemplatesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventTemplate}
     */
    this.coursesTemplatesCreate = function(coursePk, data, callback) {
      var postBody = data;

      // verify the required parameter 'coursePk' is set
      if (coursePk === undefined || coursePk === null) {
        throw new Error("Missing the required parameter 'coursePk' when calling coursesTemplatesCreate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling coursesTemplatesCreate");
      }


      var pathParams = {
        'course_pk': coursePk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EventTemplate;

      return this.apiClient.callApi(
        '/courses/{course_pk}/templates/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesTemplatesDelete operation.
     * @callback module:api/CoursesApi~coursesTemplatesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} coursePk 
     * @param {Number} id A unique integer value identifying this event template.
     * @param {module:api/CoursesApi~coursesTemplatesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.coursesTemplatesDelete = function(coursePk, id, callback) {
      var postBody = null;

      // verify the required parameter 'coursePk' is set
      if (coursePk === undefined || coursePk === null) {
        throw new Error("Missing the required parameter 'coursePk' when calling coursesTemplatesDelete");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling coursesTemplatesDelete");
      }


      var pathParams = {
        'course_pk': coursePk,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/courses/{course_pk}/templates/{id}/', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesTemplatesList operation.
     * @callback module:api/CoursesApi~coursesTemplatesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EventTemplate>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} coursePk 
     * @param {module:api/CoursesApi~coursesTemplatesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EventTemplate>}
     */
    this.coursesTemplatesList = function(coursePk, callback) {
      var postBody = null;

      // verify the required parameter 'coursePk' is set
      if (coursePk === undefined || coursePk === null) {
        throw new Error("Missing the required parameter 'coursePk' when calling coursesTemplatesList");
      }


      var pathParams = {
        'course_pk': coursePk
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [EventTemplate];

      return this.apiClient.callApi(
        '/courses/{course_pk}/templates/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesTemplatesPartialUpdate operation.
     * @callback module:api/CoursesApi~coursesTemplatesPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} coursePk 
     * @param {Number} id A unique integer value identifying this event template.
     * @param {module:model/EventTemplate} data 
     * @param {module:api/CoursesApi~coursesTemplatesPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventTemplate}
     */
    this.coursesTemplatesPartialUpdate = function(coursePk, id, data, callback) {
      var postBody = data;

      // verify the required parameter 'coursePk' is set
      if (coursePk === undefined || coursePk === null) {
        throw new Error("Missing the required parameter 'coursePk' when calling coursesTemplatesPartialUpdate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling coursesTemplatesPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling coursesTemplatesPartialUpdate");
      }


      var pathParams = {
        'course_pk': coursePk,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EventTemplate;

      return this.apiClient.callApi(
        '/courses/{course_pk}/templates/{id}/', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesTemplatesRead operation.
     * @callback module:api/CoursesApi~coursesTemplatesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} coursePk 
     * @param {Number} id A unique integer value identifying this event template.
     * @param {module:api/CoursesApi~coursesTemplatesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventTemplate}
     */
    this.coursesTemplatesRead = function(coursePk, id, callback) {
      var postBody = null;

      // verify the required parameter 'coursePk' is set
      if (coursePk === undefined || coursePk === null) {
        throw new Error("Missing the required parameter 'coursePk' when calling coursesTemplatesRead");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling coursesTemplatesRead");
      }


      var pathParams = {
        'course_pk': coursePk,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EventTemplate;

      return this.apiClient.callApi(
        '/courses/{course_pk}/templates/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesTemplatesUpdate operation.
     * @callback module:api/CoursesApi~coursesTemplatesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} coursePk 
     * @param {Number} id A unique integer value identifying this event template.
     * @param {module:model/EventTemplate} data 
     * @param {module:api/CoursesApi~coursesTemplatesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventTemplate}
     */
    this.coursesTemplatesUpdate = function(coursePk, id, data, callback) {
      var postBody = data;

      // verify the required parameter 'coursePk' is set
      if (coursePk === undefined || coursePk === null) {
        throw new Error("Missing the required parameter 'coursePk' when calling coursesTemplatesUpdate");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling coursesTemplatesUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling coursesTemplatesUpdate");
      }


      var pathParams = {
        'course_pk': coursePk,
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EventTemplate;

      return this.apiClient.callApi(
        '/courses/{course_pk}/templates/{id}/', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coursesUpdate operation.
     * @callback module:api/CoursesApi~coursesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Course} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this course.
     * @param {module:model/Course} data 
     * @param {module:api/CoursesApi~coursesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Course}
     */
    this.coursesUpdate = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling coursesUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling coursesUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Course;

      return this.apiClient.callApi(
        '/courses/{id}/', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
