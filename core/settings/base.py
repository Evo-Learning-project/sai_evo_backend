"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 3.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import os
from pathlib import Path
from oauth2_provider import settings as oauth2_settings
import environ

# TODO migrate env vars to use this
env = environ.Env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True


DEMO_MODE = os.environ.get("DEMO_MODE", "False") == "True"


ALLOWED_HOSTS = ["*"]

AUTH_USER_MODEL = "users.User"

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "drf_yasg",
    "rest_framework",
    "courses",
    "users",
    "course_tree",
    "content",
    "django_extensions",
    "nested_admin",
    "oauth2_provider",
    "social_django",
    "drf_social_oauth2",
    "corsheaders",
    "django_filters",
    "channels",
    "django_celery_results",
    "channels_redis",
    "gamification",
    "notifications",
    "user_notifications",
    "demo_mode",
    "polymorphic_tree",
    "polymorphic",
    "mptt",
    # "silk",
]

DJANGO_NOTIFICATIONS_CONFIG = {"USE_JSONFIELD": True}

SILKY_PYTHON_PROFILER = False

MIDDLEWARE = [
    # "silk.middleware.SilkyMiddleware",
    "drf_viewset_profiler.middleware.LineProfilerViewSetMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

CORS_ORIGIN_ALLOW_ALL = True
CORS_EXPOSE_HEADERS = ["Content-Disposition"]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "social_django.context_processors.backends",
                "social_django.context_processors.login_redirect",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"

# Channels
ASGI_APPLICATION = "core.asgi.application"

# CHANNEL_LAYERS = {
#     "default": {"BACKEND": "channels.layers.InMemoryChannelLayer"},
# }

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "courses.consumers.ChannelLayer",
        "CONFIG": {"hosts": [("127.0.0.1", 6379)]},
    },
}

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
        "ATOMIC_REQUESTS": True,
        #  "CONN_MAX_AGE": 10,
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

REST_FRAMEWORK = {
    "TEST_REQUEST_DEFAULT_FORMAT": "json",
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        # "rest_framework.authentication.TokenAuthentication",
        "oauth2_provider.contrib.rest_framework.OAuth2Authentication",  # django-oauth-toolkit >= 1.0.0
        "rest_framework.authentication.SessionAuthentication",  # for browsable api
        "drf_social_oauth2.authentication.SocialAuthentication",
    ),
    "DATETIME_FORMAT": "%Y-%m-%d %H:%M:%S",
}

HASHID_FIELD_SALT = os.environ.get("HASHID_FIELD_SALT")


AUTHENTICATION_BACKENDS = (
    # Google OAuth2
    "core.auth.backends.GoogleOAuth2Backend",
    # drf-social-oauth2
    "drf_social_oauth2.backends.DjangoOAuth2",
    # Django
    "django.contrib.auth.backends.ModelBackend",
)

# Google configuration
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = os.environ.get("SOCIAL_AUTH_GOOGLE_OAUTH2_KEY")
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = os.environ.get("SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET")

# Define SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE to get extra permissions from Google.
SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = [
    "https://www.googleapis.com/auth/userinfo.email",
    "https://www.googleapis.com/auth/userinfo.profile",
]

# SOCIAL_AUTH_PIPELINE = (
#     # Get the information we can about the user and return it in a simple
#     # format to create the user instance later. In some cases the details are
#     # already part of the auth response from the provider, but sometimes this
#     # could hit a provider API.
#     "social_core.pipeline.social_auth.social_details",
#     # Get the social uid from whichever service we're authing thru. The uid is
#     # the unique identifier of the given user in the provider.
#     "social_core.pipeline.social_auth.social_uid",
#     # Verifies that the current auth process is valid within the current
#     # project, this is where emails and domains whitelists are applied (if
#     # defined).
#     "social_core.pipeline.social_auth.auth_allowed",
#     # Checks if the current social-account is already associated in the site.
#     "social_core.pipeline.social_auth.social_user",
#     # Make up a username for this person, appends a random string at the end if
#     # there's any collision.
#     "social_core.pipeline.user.get_username",
#     # Send a validation email to the user to verify its email address.
#     # Disabled by default.
#     # 'social_core.pipeline.mail.mail_validation',
#     # Associates the current social details with another user account with
#     # a similar email address. Disabled by default.
#     # 'social_core.pipeline.social_auth.associate_by_email',
#     # Create a user account if we haven't found one yet.
#     "social_core.pipeline.user.create_user",
#     # Create the record that associates the social account with the user.
#     "social_core.pipeline.social_auth.associate_user",
#     # Populate the extra_data field in the social record with the values
#     # specified by settings (and the default ones like access_token, etc).
#     "social_core.pipeline.social_auth.load_extra_data",
#     # Update the user record with any changed info from the auth service.
#     "social_core.pipeline.user.user_details",
# )

# Limit allowed email domains
# to limit addresses shown - SOCIAL_AUTH_GOOGLE_OAUTH2_AUTH_EXTRA_ARGUMENTS = {"hd": "unipi.it"}

SOCIAL_AUTH_GOOGLE_OAUTH2_WHITELISTED_DOMAINS = env.list(
    "AUTH_ALLOWED_DOMAINS", default=[]
)


oauth2_settings.DEFAULTS["ACCESS_TOKEN_EXPIRE_SECONDS"] = int(
    os.environ.get("TOKEN_EXPIRE_SECONDS", 2592000)
)

# TODO move to separate settings module for demo mode
if DEMO_MODE:
    # in demo mode, make tokens last a week
    oauth2_settings.DEFAULTS["ACCESS_TOKEN_EXPIRE_SECONDS"] = int(
        os.environ.get("TOKEN_EXPIRE_SECONDS", 60 * 60 * 24 * 7)
    )


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Europe/Rome"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
MEDIA_ROOT = os.environ.get("MEDIA_ROOT", os.path.join(BASE_DIR, "media"))
MEDIA_URL = os.environ.get("MEDIA_URL", "/media/")


CELERY_RESULT_BACKEND = "django-db"
CELERY_BROKER_URL = os.environ.get("RABBITMQ_URL", "amqp://localhost:5672")


# Email settings
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = os.environ.get("EMAIL_HOST")
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER", None)
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD", None)
EMAIL_PORT = int(os.environ.get("EMAIL_PORT", 587))
DEFAULT_FROM_EMAIL = os.environ.get("DEFAULT_FROM_EMAIL")
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "file": {
            "level": "CRITICAL",
            "class": "logging.FileHandler",
            "filename": "debug.log",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["file"],
            "level": "DEBUG",
            "propagate": True,
        },
    },
}
